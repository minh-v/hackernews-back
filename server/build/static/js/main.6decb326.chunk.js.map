{"version":3,"sources":["config.js","lib/user.js","magic.js","components/Nav.js","components/Side.js","components/SignupForm.js","lib/queries.js","pages/SignUp.js","components/LoginForm.js","pages/Login.js","utils/timeDifference.js","utils/utils.js","components/Post.js","components/PostList.js","lib/constants.js","pages/Search.js","components/SubmitForm.js","pages/Submit.js","components/CommentComponent.js","components/CommentList.js","pages/PostPage.js","pages/ProfilePage.js","pages/Submitted.js","pages/Comments.js","pages/Top.js","pages/New.js","App.js","index.js"],"names":["config","MAGIC_API_KEY","api","process","hasura_endpoint","fetchUser","url","fetch","credentials","then","res","json","useUser","useSWR","data","error","user","loading","magic","Magic","SubMenu","Menu","Nav","history","useHistory","pathname","useLocation","minBreakpoint","useMediaQuery","query","logout","a","go","push","className","theme","mode","disabledOverflow","selectedKeys","split","Item","to","issuer","title","PlusOutlined","style","fontSize","username","karma","onClick","triggerSubMenuAction","icon","MenuOutlined","Side","handleSearch","onFinish","values","search","name","rules","required","message","width","marginRight","placeholder","htmlType","shape","SearchOutlined","bordered","alert","type","SignupForm","handleSignup","disabled","email","prefix","MailOutlined","UserOutlined","SendOutlined","CHECK_DUPLICATE","gql","CHECK_EMAIL","GET_USER_DATA","GET_POST","GET_POST_COMMENTS_SORTED_TOP","GET_POSTS_FROM_USERNAME","GET_COMMENTS_FROM_USERNAME","SUBSCRIBE_POSTS","SEARCH_POSTS_SORTED_NEW","SEARCH_POSTS_SORTED_TOP","SignUp","useState","setDisabled","checkDuplicate","refetch","useQuery","skip","variables","useImperativeQuery","users","length","auth","loginWithMagicLink","didToken","method","headers","Authorization","body","JSON","stringify","status","console","log","handleLogin","Login","checkEmail","LoginForm","timeDifferenceForDate","date","current","previous","milliSecondsPerMinute","milliSecondsPerHour","milliSecondsPerDay","milliSecondsPerMonth","milliSecondsPerYear","elapsed","Math","round","timeDifference","Date","getTime","urlContains","parameter","includes","Post","post","selected","setSelected","index","totalVotes","votes","aggregate","sum","value","confirm","setConfirm","deleteText","setDeleteText","upvote","item","post_id","id","poster","downvote","handleDelete","userVote","userVotes","UpCircleTwoTone","twoToneColor","DownCircleTwoTone","LinkOutlined","Meta","href","description","createdAt","comments_aggregate","count","PostList","prevLink","nextLink","pageNumber","posts","pageIndex","SEARCH","location","newSearch","parseInt","pageIndexParams","order","clasName","itemLayout","dataSource","renderItem","indexOf","ArrowLeftOutlined","ArrowRightOutlined","Search","props","urlPieces","page","SEARCH_QUERY","offset","user_issuer","limit","menu","initialValue","overlay","trigger","DownOutlined","SubmitForm","handleSubmit","label","Submit","TextArea","Input","CommentComponent","comment","children","comments","open","setOpen","likes","setLikes","dislikes","setDislikes","userLike","action","setAction","reply","parent_id","like","comment_id","dislike","actions","LikeFilled","LikeOutlined","DislikeFilled","DislikeOutlined","author","content","datetime","map","child","filter","c","CommentList","baseComments","PostPage","pieces","sort","Form","useForm","form","QUERY","useSubscription","commentDisplay","setCommentDisplay","posts_by_pk","resetFields","b","ProfilePage","toDateString","Submitted","Comments","Top","votes_aggregate","useEffect","forEach","New","Header","Layout","Content","Sider","App","showSider","setShowSider","currentPath","span","xs","md","exact","path","forceRefresh","render","component","Callback","onBreakpoint","broken","wsLink","WebSocketLink","uri","options","reconnect","client","ApolloClient","cache","InMemoryCache","link","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"yQAMeA,EANA,CACbC,cAAe,2BACfC,IAA6CC,4BAC7CC,gBAAyDD,mCCArDE,EAAY,SAACC,GAAD,OAASC,MAAMD,EAAK,CAAEE,YAAa,YAAaC,MAAK,SAACC,GAAD,OAASA,EAAIC,WAE7E,SAASC,IACd,MAAwBC,YAAO,GAAD,OAAIb,EAAOE,IAAX,SAAuBG,GAA7CS,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,OAAQD,GAASC,EAA4BD,IAAI,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAME,MAAlC,CAAEC,SAAS,G,kCCHvBC,EAFD,I,OAAIC,GAAMnB,EAAOC,e,kDCQvBmB,EAAYC,IAAZD,QA2HOE,EAzHH,WACV,IAAIN,EAAOJ,IACLW,EAAUC,cAERC,EADSC,cACTD,SAEFE,EAAgBC,wBAAc,CAAEC,MAAO,sBAEvCC,EAAM,uCAAG,sBAAAC,EAAA,sEACPxB,MAAM,GAAD,OAAIP,EAAOE,IAAX,WAAyB,CAClCM,YAAa,YAFF,uBAKPU,EAAMF,KAAKc,SALJ,OAQbP,EAAQS,GAAG,GACXT,EAAQU,KAAK,KATA,2CAAH,qDAWZ,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,QAAf,SACE,eAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,kBAAkB,EAAMC,aAAc,CAACb,EAASc,MAAM,KAAK,IAAhG,UACE,cAAC,IAAKC,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,IAAT,iBAAiB,SADJ,QAKf,cAAC,IAAKD,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,SAAT,kBADa,OAGf,cAAC,IAAKD,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,SAAT,kBADa,eAMhB,OAAJzB,QAAI,IAAJA,OAAA,EAAAA,EAAMC,SACL,yBACM,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAM0B,QACR,sBAAKR,UAAU,WAAf,WACIP,GACA,eAAC,IAAD,CAAMQ,MAAM,OAAOC,KAAK,aAAaE,aAAc,CAACb,EAASc,MAAM,KAAK,IAAxE,UACE,cAAC,IAAD,CAASI,MAAM,cAAf,SACE,cAAC,IAAKH,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,UAAT,SACE,cAACG,EAAA,EAAD,CAAcC,MAAO,CAAEC,SAAU,WADZ,WADV,YAMjB,cAAC,IAAKN,KAAN,UACE,eAAC,IAAD,CAAMC,GAAE,mBAAczB,EAAK+B,UAA3B,UACG/B,EAAK+B,SADR,KACoB/B,EAAKgC,MADzB,MAA2C,YAD7C,OAAgBhC,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAM+B,UAKtB,cAAC,IAAKP,KAAN,CAAwBS,QAASnB,EAAjC,SACE,2CADa,aAKlBH,GACC,cAAC,IAAD,CAAMQ,MAAM,OAAOC,KAAK,aAAaE,aAAc,CAACb,EAASc,MAAM,KAAK,IAAKW,qBAAqB,QAAlG,SACE,eAAC9B,EAAD,CAAuB+B,KAAM,cAACC,EAAA,EAAD,CAAcP,MAAO,CAAEC,SAAU,UAA9D,UACE,cAAC,IAAD,CAASH,MAAM,cAAf,SACE,cAAC,IAAKH,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,UAAT,SACE,cAACG,EAAA,EAAD,CAAcC,MAAO,CAAEC,SAAU,WADZ,WADV,YAMjB,cAAC,IAAKN,KAAN,UACE,eAAC,IAAD,CAAMC,GAAE,mBAAczB,EAAK+B,UAA3B,UACG/B,EAAK+B,SADR,KACoB/B,EAAKgC,MADzB,MAA2C,YAD9B,WAKf,cAAC,IAAKR,KAAN,CAAwBS,QAASnB,EAAjC,SACE,2CADa,YAbJ,gBAqBnB,sBAAKI,UAAU,WAAf,WACIP,GACA,eAAC,IAAD,CAAMQ,MAAM,OAAOC,KAAK,aAAaC,kBAAkB,EAAMC,aAAc,CAACb,EAASc,MAAM,KAAK,IAAhG,UACE,cAAC,IAAKC,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,SAAT,kBAAsB,UADT,SAKf,cAAC,IAAKD,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,UAAT,oBAAuB,WADV,aAOlBd,GACC,cAAC,IAAD,CAAMQ,MAAM,OAAOC,KAAK,aAAaC,kBAAkB,EAAMC,aAAc,CAACb,EAASc,MAAM,KAAK,IAAhG,SACE,eAACnB,EAAD,CAAuB+B,KAAM,cAACC,EAAA,EAAD,CAAcP,MAAO,CAAEC,SAAU,UAA9D,UACE,cAAC,IAAKN,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,SAAT,kBAAsB,UADT,SAKf,cAAC,IAAKD,KAAN,UACE,cAAC,IAAD,CAAMC,GAAG,UAAT,mBAAuB,WADV,YANJ,oB,8DCvDZY,EApDF,SAAC,GAAqB,EAAnBC,aAAoB,IAC5BtC,EAAOJ,IACTW,EAAUC,cAOd,OACE,sBAAKU,UAAU,iBAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,eAAC,IAAD,CAAMqB,SARS,SAACC,GACpB,IAAQC,EAAWD,EAAXC,OACRlC,EAAQU,KAAR,oBAA0BwB,EAA1B,QAMkCvB,UAAU,kBAAxC,UACE,cAAC,IAAKM,KAAN,CACEkB,KAAK,SACLC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,oBAGbhB,MAAO,CAAEiB,MAAO,MAAOC,YAAa,QARtC,SAUE,cAAC,IAAD,CAAOC,YAAY,SAAS9B,UAAU,wBAExC,cAAC,IAAKM,KAAN,UACE,cAAC,IAAD,CAAQyB,SAAS,SAASC,MAAM,SAASf,KAAM,cAACgB,EAAA,EAAD,aAIrD,qBAAKjC,UAAU,YAAf,SACE,cAAC,IAAD,CAAMkC,UAAU,EAAhB,SACE,qBACEnB,QAAS,WACFjC,IACHqD,MAAM,2CACN9C,EAAQU,KAAK,YAJnB,SAQE,cAAC,IAAD,CAAMQ,GAAG,UAAT,SACE,cAAC,IAAD,CAAQ6B,KAAK,UAAUpC,UAAU,mBAAjC,uC,sDCFCqC,EAzCI,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAMlC,OACE,gCACE,cAAC,IAAD,CAAY9B,MAAM,UAAUT,UAAU,gBACtC,eAAC,IAAD,CAAMqB,SARW,SAACC,GACpB,IAAQkB,EAAoBlB,EAApBkB,MAAO3B,EAAaS,EAAbT,SACfyB,EAAaE,EAAO3B,IAMlB,UACE,cAAC,IAAKP,KAAN,CACEkB,KAAK,QACLC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,6BALf,SASE,cAAC,IAAD,CAAOc,OAAQ,cAACC,EAAA,EAAD,CAAc1C,UAAU,yBAA2B8B,YAAY,YAEhF,cAAC,IAAKxB,KAAN,CACEkB,KAAK,WACLe,SAAUA,EACVd,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCANf,SAUE,cAAC,IAAD,CAAOc,OAAQ,cAACE,EAAA,EAAD,CAAc3C,UAAU,wBAA0B8B,YAAY,eAE/E,cAAC,IAAD,CAAQM,KAAK,UAAUG,SAAUA,EAAUR,SAAS,SAASd,KAAM,cAAC2B,EAAA,EAAD,IAAkB5C,UAAU,0BAA/F,4B,oCCpCK6C,GAAkBC,aAAH,iOASfC,GAAcD,aAAH,4IAQXE,GAAgBF,aAAH,yKA4BbG,IAnBgBH,aAAH,wOAmBFA,aAAH,inCAqDRI,GAA+BJ,aAAH,mpCAqD5BK,GAA0BL,aAAH,4qBA6BvBM,GAA6BN,aAAH,6zCA4D1BO,GAAkBP,aAAH,svBAkCfQ,GAA0BR,aAAH,yuBAmCvBS,GAA0BT,aAAH,mwBC7OrBU,GA9DA,WACb,IAAMnE,EAAUC,cAChB,EAAgCmE,oBAAS,GAAzC,mBAAOlB,EAAP,KAAiBmB,EAAjB,KAaMC,EAVqB,SAAChE,GAC1B,IAAQiE,EAAYC,YAASlE,EAAO,CAAEmE,MAAM,IAApCF,QAMR,OAJ8B,SAACG,GAC7B,OAAOH,EAAQG,IAMIC,CAAmBnB,IAEpCP,EAAY,uCAAG,WAAOE,EAAO3B,GAAd,mBAAAhB,EAAA,6DAEnB6D,GAAY,GAFO,SAGIC,EAAe,CAAEnB,MAAOA,EAAO3B,SAAUA,IAH7C,mBAOO,KAJlBjC,EAHW,EAGXA,MAICqF,MAAMC,OAPI,wBAQb1B,IAAU5D,EAAKqF,MAAM,GAAGzB,OAAOb,IAAQ9C,MAAM,4CAC7CgC,IAAajC,EAAKqF,MAAM,GAAGpD,UAAUc,IAAQ9C,MAAM,uCACvD6E,GAAY,GAVK,4CAiBI1E,EAAMmF,KAAKC,mBAAmB,CACnD5B,UAlBiB,eAiBb6B,EAjBa,iBAsBDhG,MAAM,GAAD,OAAIP,EAAOE,IAAX,WAAyB,CAC9CsG,OAAQ,OACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAYH,GAE7BI,KAAMC,KAAKC,UAAU,CAAE9D,eA7BN,QA+BA,MA/BA,OA+BX+D,QACNC,QAAQC,IAAI,sBAEdpB,GAAY,GACZrE,EAAQU,KAAK,KAnCM,4CAAH,wDAsClB,OACE,qBAAKC,UAAU,cAAf,SACE,cAAC,EAAD,CAAYsC,aAAcA,EAAcC,SAAUA,OCnCzCF,GA7BI,SAAC,GAA+B,IAA7B0C,EAA4B,EAA5BA,YAAaxC,EAAe,EAAfA,SAMjC,OACE,gCACE,cAAC,IAAD,CAAY9B,MAAM,SAAST,UAAU,gBACrC,eAAC,IAAD,CAAMqB,SARW,SAACC,GACpB,IAAQkB,EAAUlB,EAAVkB,MACRuC,EAAYvC,IAMV,UACE,cAAC,IAAKlC,KAAN,CACEkB,KAAK,QACLC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,6BALf,SASE,cAAC,IAAD,CAAOc,OAAQ,cAACC,EAAA,EAAD,CAAc1C,UAAU,yBAA2B8B,YAAY,YAEhF,cAAC,IAAD,CAAQM,KAAK,UAAUG,SAAUA,EAAUR,SAAS,SAAS/B,UAAU,0BAAvE,2BCqCOgF,GApDD,WAEZ,IAUM3F,EAAUC,cACV2F,EAXqB,SAACtF,GAC1B,IAAQiE,EAAYC,YAASlE,EAAO,CAAEmE,MAAM,IAApCF,QAMR,OAJ8B,SAACG,GAC7B,OAAOH,EAAQG,IAOAC,CAAmBjB,IAEhCgC,EAAW,uCAAG,WAAOvC,GAAP,iBAAA3C,EAAA,sEACKoF,EAAW,CAAEzC,MAAOA,IADzB,mBAGQ,IAHR,EACV5D,KAECqF,MAAMC,OAHG,uBAIhBvC,IAAQ9C,MAAM,4CAJE,0CAWKG,EAAMmF,KAAKC,mBAAmB,CACnD5B,UAZgB,cAWZ6B,EAXY,iBAeAhG,MAAM,GAAD,OAAIP,EAAOE,IAAX,UAAwB,CAC7CsG,OAAQ,OACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAYH,KApBb,QAwBC,MAxBD,OAwBVO,QACNC,QAAQC,IAAI,oBAEdzF,EAAQU,KAAK,KACbV,EAAQS,GAAG,GA5BO,4CAAH,sDA8BjB,OACE,qBAAKE,UAAU,aAAf,SACE,cAACkF,GAAD,CAAWH,YAAaA,O,8BC7BvB,SAASI,GAAsBC,GAGpC,OA/BF,SAAwBC,EAASC,GAC/B,IAAMC,EAAwB,IACxBC,EAAsBD,KACtBE,EAAqBD,MACrBE,EAAuBD,OACvBE,EAAsBF,QAEtBG,EAAUP,EAAUC,EAE1B,OAAIM,EAAUL,IACL,WAGLK,EAAUL,EACL,sBACEK,EAAUJ,EACZK,KAAKC,MAAMF,EAAUL,GAAyB,WAC5CK,EAAUH,EACZI,KAAKC,MAAMF,EAAUJ,GAAuB,aAC1CI,EAAUF,EACZG,KAAKC,MAAMF,EAAUH,GAAsB,YACzCG,EAAUD,EACZE,KAAKC,MAAMF,EAAUF,GAAwB,cAE7CG,KAAKC,MAAMF,EAAUD,GAAuB,aAO9CI,EAFK,IAAIC,MAAOC,UACP,IAAID,KAAKZ,GAAMa,W,kCC9BpBC,GAAc,SAAC9H,EAAK+H,GAC/B,OAAO/H,EAAIgI,SAASD,ICmJPE,GA3IF,SAAC,GAA4C,IAAD,IA4DnC,EA5DNC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACrC3H,EAAOJ,IACPW,EAAUC,cAEVoH,GAAa,UAAAJ,EAAKK,aAAL,mBAAYC,iBAAZ,eAAuBC,IAAIC,QAAS,EAEvD,EAA8BrD,oBAAS,GAAvC,mBAAOsD,EAAP,KAAgBC,EAAhB,KACA,EAAoCvD,mBAAS,UAA7C,mBAAOwD,EAAP,KAAmBC,EAAnB,KAEMC,EAAM,uCAAG,WAAOC,GAAP,SAAAvH,EAAA,yDACRf,EADQ,uBAEXqD,MAAM,kCACN9C,EAAQU,KAAK,WAHF,0CAMP1B,MAAM,GAAD,OAAIP,EAAOE,IAAX,SAAuB,CAChCsG,OAAQ,OACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CAAE0C,QAASD,EAAKE,GAAIR,MAAO,EAAGS,OAAQjB,EAAKxH,KAAK0B,WAZ1D,2CAAH,sDAkBNgH,EAAQ,uCAAG,WAAOJ,GAAP,SAAAvH,EAAA,yDACVf,EADU,uBAEbqD,MAAM,kCAEN9C,EAAQU,KAAK,WAJA,0CAOT1B,MAAM,GAAD,OAAIP,EAAOE,IAAX,SAAuB,CAChCsG,OAAQ,OACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CAAE0C,QAASD,EAAKE,GAAIR,OAAQ,EAAGS,OAAQjB,EAAKxH,KAAK0B,WAbzD,2CAAH,sDAiBRiH,EAAY,uCAAG,WAAOL,GAAP,SAAAvH,EAAA,0DACff,EADe,gCAEXT,MAAM,GAAD,OAAIP,EAAOE,IAAX,SAAuB,CAChCsG,OAAQ,SACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CAAE0C,QAASD,EAAKE,OARtB,OAWjBJ,EAAc,WAXG,2CAAH,sDAedQ,EAAW,EACXpB,EAAKqB,YACPD,EAAQ,OAAGpB,QAAH,IAAGA,GAAH,UAAGA,EAAMqB,UAAU,UAAnB,aAAG,EAAoBb,OAGjC,OACE,qBACE9G,WAAwB,IAAbuG,EAAoB,gBAAkB,OACjDxF,QAAS,WACoB,oBAAhByF,GAA4BA,EAAYF,EAAKgB,KAH5D,SAME,eAAC,KAAKhH,KAAN,WACE,sBAAKN,UAAU,aAAf,UAA6ByG,EAA7B,OACA,8BACgB,IAAbiB,EACC,sBAAK1H,UAAU,OAAf,UACE,cAAC,IAAD,CACEoC,KAAK,OACLL,SAAS,SACTd,KAAM,cAAC2G,GAAA,EAAD,CAAiBC,aAAa,YACpC9G,QAAS,kBAAMoG,EAAOb,MAExB,sBAAMtG,UAAU,eAAhB,SAAgC0G,IAChC,cAAC,IAAD,CAAQtE,KAAK,OAAOL,SAAS,SAASd,KAAM,cAAC6G,GAAA,EAAD,IAAuB/G,QAAS,kBAAMyG,EAASlB,UAE7E,IAAdoB,EACF,sBAAK1H,UAAU,OAAf,UACE,cAAC,IAAD,CAAQoC,KAAK,OAAOL,SAAS,SAASd,KAAM,cAAC2G,GAAA,EAAD,IAAqB7G,QAAS,kBAAMoG,EAAOb,MACvF,sBAAMtG,UAAU,iBAAhB,SAAkC0G,IAClC,cAAC,IAAD,CACEtE,KAAK,OACLL,SAAS,SACTd,KAAM,cAAC6G,GAAA,EAAD,CAAmBD,aAAa,YACtC9G,QAAS,kBAAMyG,EAASlB,SAI5B,sBAAKtG,UAAU,OAAf,UACE,cAAC,IAAD,CAAQoC,KAAK,OAAOL,SAAS,SAASd,KAAM,cAAC2G,GAAA,EAAD,IAAqB7G,QAAS,kBAAMoG,EAAOb,MACvF,sBAAMtG,UAAU,aAAhB,SAA8B0G,IAC9B,cAAC,IAAD,CAAQtE,KAAK,OAAOL,SAAS,SAASd,KAAM,cAAC6G,GAAA,EAAD,IAAuB/G,QAAS,kBAAMyG,EAASlB,WAIjG,qBAAKtG,UAAU,YAAf,SACE,cAAC,KAAKM,KAAN,UACE,cAACyH,GAAA,EAAD,QAGJ,cAAC,KAAKzH,KAAK0H,KAAX,CACEvH,MAAO,oBAAGwH,KAAI,YAAO3B,EAAKlI,KAAnB,UAA2BkI,EAAK7F,MAAhC,8BACPyH,YACE,oCACK,cAAC,IAAD,CAAM3H,GAAE,mBAAc+F,EAAKxH,KAAK+B,UAAhC,SAA6CyF,EAAKxH,KAAK+B,WAD5D,IAC8EsE,GAAsBmB,EAAK6B,WADzG,KACuH,IACrH,eAAC,IAAD,CAAM5H,GAAE,mBAAc+F,EAAKgB,IAA3B,UAAkChB,EAAK8B,mBAAmBxB,UAAUyB,MAApE,eAA2F,IAC1F/B,EAAKxH,KAAK+B,YAAV,OAAuB/B,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAM+B,UAC5B,uBAAME,QAAS,kBAAMiG,GAAYD,IAAjC,cACI,IACDA,EACC,iDACgB,IACd,sBAAM/G,UAAU,qBAAqBe,QAAS,kBAAM0G,EAAanB,IAAjE,iBAFF,SAQAW,KAGF,gB,oBCjCHqB,GA9FE,SAAC,GAA0B,IAStCC,EAAUC,EAAUC,EATNC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACnBC,EAAS,SAITvJ,EAAUC,cAEVlB,EAAMiB,EAAQwJ,SAAStJ,SAM7B,GAAI2G,GAAY9H,EAAKwK,GAAS,CAC5B,IAAME,EAAYzJ,EAAQwJ,SAAStH,OAAOlB,MAAM,KAAK,GACrDoI,EAAaM,SAAS1J,EAAQwJ,SAAStH,OAAOlB,MAAM,KAAK,IAGzDkI,EAAWnK,EAAM0K,EAAY,KAFZL,EAAa,GAG9BD,EAAWpK,EAAM0K,EAAY,KAFZL,EAAa,QAGzB,GAAIvC,GAAY9H,EAlBL,cAkBwB8H,GAAY9H,EAjBrC,YAiBqD,CACpE,IAAM4K,EAAkB5K,EAAIiC,MAAM,KAClCoI,EAAaM,SAASC,EAAgBA,EAAgB9E,OAAS,IAC/D,IAAMrD,EAAWmI,EAAgBA,EAAgB9E,OAAS,GAC1DqE,EAAW,cAAgB1H,EAAW,KAAO4H,EAAa,GAC1DD,EAAW,cAAgB3H,EAAW,KAAO4H,EAAa,OACrD,CACL,IAAMO,EAAkB5K,EAAIiC,MAAM,KAClCoI,EAAaM,SAASC,EAAgBA,EAAgB9E,OAAS,IAC/D,IAAM+E,EAAQD,EAAgBA,EAAgB9E,OAAS,GACvDqE,EAAW,IAAMU,EAAQ,KAAOR,EAAa,GAC7CD,EAAW,IAAMS,EAAQ,KAAOR,EAAa,GAG/C,MAAgChF,mBAAS,MAAzC,mBAAO8C,EAAP,KAAiBC,EAAjB,KACM/G,EAAgBC,wBAAc,CAAEC,MAAO,sBAE7C,OACE,gCACGF,IAAkByG,GAAY9H,EAAKwK,IAClC,qBAAKM,SAAS,aAAd,SACE,cAAC,EAAD,MAGJ,cAAC,KAAD,CACEC,WAAW,aACXC,WAAYV,EACZW,WAAY,SAACjC,GACX,OACE,gCACE,qBAAKpH,UAAU,iBACf,cAAC,GAAD,CACEsG,KAAMc,EAENb,SAAUA,IAAaa,EAAKE,GAC5Bd,YAAaA,EACbC,MAAOiC,EAAMY,QAAQlC,GAAQuB,EAAY,GAHpCvB,EAAKE,UASpB,sBAAKtH,UAAU,oBAAf,UACGyI,EAAa,EACZ,qBACEzI,UAAU,kBACVe,QAAS,WACH0H,EAAa,GACfpJ,EAAQU,KAAKwI,IAJnB,SAQE,cAAC,IAAD,UACE,cAACgB,GAAA,EAAD,CAAmB5I,MAAO,CAAEC,SAAU,cAGxC,KCxFkB,IDyFrB8H,EAAMxE,OACL,qBACElE,UAAU,cACVe,QAAS,WACP1B,EAAQU,KAAKyI,IAHjB,SAME,cAAC,IAAD,UACE,cAACgB,GAAA,EAAD,CAAoB7I,MAAO,CAAEC,SAAU,cAGzC,Y,UESG6I,GAlGA,SAACC,GACd,IAAM5K,EAAOJ,IACTW,EAAUC,cAERqK,EAAYD,EAAMb,SAAStH,OAAOlB,MAAM,KAE1CuJ,EAAO,EACPX,EAAQ,MAEND,EAAkBW,EAAU,GAAGtJ,MAAM,KACvCsJ,EAAUzF,OAAS,GACrB0F,EAAOD,EAAU,GAAGtJ,MAAM,KAAK,GAAGA,MAAM,KAAK,GAC7C4I,EAAQU,EAAU,GAAGtJ,MAAM,KAAK,GAAGA,MAAM,KAAK,IAE9CuJ,EAAOb,SAASC,EAAgBA,EAAgB9E,OAAS,IAG3D,IAAM3C,EAASyH,EAAgB,GAAG3I,MAAM,KAAK,GAEvCwJ,EAAyB,QAAVZ,EAAkB3F,GAA0BC,GAE3DuG,EDhCsB,GCgCZF,EAAO,GAGvB,EAA0B/F,YAASgG,EAAc,CAC/C9F,UAAW,CAAEgG,YAAajL,EAAI,OAAGA,QAAH,IAAGA,OAAH,EAAGA,EAAM0B,OAAS,GAAIsJ,OAAQA,EAAQE,MDpC1C,ECoCwDzI,OAAQA,KADpF3C,EAAR,EAAQA,KAAMG,EAAd,EAAcA,QAIRkL,EACJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAM1J,GAAE,UAAKoJ,EAAU,GAAf,MAAR,SACE,cAAC,IAAKrJ,KAAN,iBAAe,SAEjB,cAAC,IAAD,CAAMC,GAAE,UAAKyI,EAAgB,GAArB,eAAR,SACE,cAAC,IAAK1I,KAAN,iBAAe,YAUrB,OAAIvB,IAAYH,EAAa,4CACH,IAAtBA,EAAK8J,MAAMxE,OAEX,gCACE,cAAC,KAAD,IACA,sBACElE,UAAU,kBACVe,QAAS,WACH6I,EAAO,GACTvK,EAAQU,KAAR,iBAAuBV,EAAQwJ,SAAStH,OAAOlB,MAAM,KAAK,GAA1D,YAAgEuJ,EAAO,KAJ7E,SAQE,cAAC,IAAD,UACE,cAACL,GAAA,EAAD,CAAmB5I,MAAO,CAAEC,SAAU,iBAM9C,gCACE,eAAC,IAAD,CAAMS,SA1BW,SAACC,GACpB,IAAQC,EAAWD,EAAXC,OAERlC,EAAQU,KAAR,oBAA0BwB,EAA1B,QAuBgCvB,UAAU,cAAxC,UACE,cAAC,IAAKM,KAAN,CAEEkB,KAAK,SACLC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,oBAGbuI,aAAc3I,EAThB,SAWE,cAAC,IAAD,CAAOO,YAAY,SAASgF,MAAM,cAEpC,cAAC,IAAKxG,KAAN,UACE,cAAC,IAAD,CAAQyB,SAAS,SAASC,MAAM,SAASf,KAAM,cAACgB,EAAA,EAAD,WAGnD,uBAAMjC,UAAU,eAAhB,sBACY,IACV,cAAC,KAAD,CAAUmK,QAASF,EAAMG,QAAS,CAAC,SAAnC,SACE,uBAAMpK,UAAU,iBAAhB,UACGiJ,EADH,IACU,cAACoB,GAAA,EAAD,YAId,8BACE,cAAC,GAAD,CAAU3B,MAAK,OAAE9J,QAAF,IAAEA,OAAF,EAAEA,EAAM8J,MAAOC,UAAWmB,UCvDlCQ,GA5CI,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAMpB,OACE,gCACE,cAAC,IAAD,CAAY9J,MAAM,cAAcT,UAAU,gBAC1C,eAAC,IAAD,CAAMqB,SARe,SAACC,GACxB,IAAQb,EAAea,EAAfb,MAAOrC,EAAQkD,EAARlD,IACfmM,EAAa9J,EAAOrC,IAMlB,UACE,cAAC,IAAKkC,KAAN,CACEkK,MAAM,QACNhJ,KAAK,QACLC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,kCANf,SAUE,cAAC,IAAD,MAEF,cAAC,IAAKrB,KAAN,CACEkK,MAAM,MACNhJ,KAAK,MAELC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCAPf,SAYE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAQS,KAAK,UAAUL,SAAS,SAAS/B,UAAU,0BAAnD,2BCdOyK,GAvBA,WACb,IAAMpL,EAAUC,cAEViL,EAAY,uCAAG,WAAO9J,EAAOrC,GAAd,SAAAyB,EAAA,sEACbxB,MAAM,GAAD,OAAIP,EAAOE,IAAX,SAAuB,CAChCsG,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBjG,YAAa,UACbmG,KAAMC,KAAKC,UAAU,CAAElE,QAAOrC,UAPb,OASnByG,QAAQC,IAAI,YACZzF,EAAQU,KAAK,KAVM,2CAAH,wDAalB,OACE,qBAAKC,UAAU,cAAf,SACE,cAAC,GAAD,CAAYuK,aAAcA,O,4DCZxBG,GAAaC,IAAbD,SAmNOE,GAjNU,SAAnBA,EAAoB,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACvCjM,EAAOJ,IACPW,EAAUC,cAChB,EAAwBmE,oBAAS,GAAjC,mBAAOuH,EAAP,KAAaC,EAAb,KACA,EAA8BxH,oBAAS,GAAvC,mBAAOsD,EAAP,KAAgBC,EAAhB,KACA,EAA0BvD,mBAASoH,EAAQK,MAAMtE,UAAUyB,OAA3D,mBAAO6C,EAAP,KAAcC,EAAd,KACA,EAAgC1H,mBAASoH,EAAQO,SAASxE,UAAUyB,OAApE,mBAAO+C,EAAP,KAAiBC,EAAjB,KACA,EAA4B5H,oBAAS,UAAAoH,EAAQS,SAAS,UAAjB,eAAqBxE,QAAS,MAAnE,mBAAOyE,EAAP,KAAeC,EAAf,KACA,EAAgC/H,oBAAS,GAAzC,mBAAOlB,EAAP,KAAiBmB,EAAjB,KAIM6G,EAAY,uCAAG,WAAOjJ,GAAP,eAAAzB,EAAA,6DACdf,IACHqD,MAAM,qCACN9C,EAAQU,KAAK,WAEP0L,EAAUnK,EAAVmK,MALW,SAMbpN,MAAM,GAAD,OAAIP,EAAOE,IAAX,YAA0B,CACnCsG,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBjG,YAAa,UACbmG,KAAMC,KAAKC,UAAU,CAAE0C,QAASwD,EAAQxD,QAASwD,QAASY,EAAOC,UAAWb,EAAQvD,OAZnE,OAcnB2D,GAASD,GACT3L,EAAQS,GAAG,GAfQ,2CAAH,sDAkBZ6L,EAAI,uCAAG,4BAAA9L,EAAA,yDACNf,EADM,uBAETqD,MAAM,kCACN9C,EAAQU,KAAK,WAHJ,6BAMX2D,GAAY,GACG,IAAX6H,EAPO,wBAQTJ,EAASD,EAAQ,GACjBM,EAAU,MATD,UAUHnN,MAAM,GAAD,OAAIP,EAAOE,IAAX,iBAA+B,CACxCsG,OAAQ,OACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CAAEiH,WAAYf,EAAQvD,GAAIR,MAAO,EAAGQ,GAAE,UAAEuD,EAAQS,SAAS,UAAnB,aAAE,EAAqBhE,OAhB3E,oCAkBY,IAAZiE,EAlBA,wBAmBTJ,EAASD,EAAQ,GACjBG,EAAYD,EAAW,GACvBI,EAAU,GArBD,UAuBHnN,MAAM,GAAD,OAAIP,EAAOE,IAAX,iBAA+B,CACxCsG,OAAQ,OACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CAAEiH,WAAYf,EAAQvD,GAAIR,MAAO,MA7B/C,uCAgCTqE,EAASD,EAAQ,GACjBM,EAAU,GAjCD,UAkCHnN,MAAM,GAAD,OAAIP,EAAOE,IAAX,iBAA+B,CACxCsG,OAAQ,OACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CAAEiH,WAAYf,EAAQvD,GAAIR,MAAO,MAxC/C,QA2CXpD,GAAY,GA3CD,4CAAH,qDA8CJmI,EAAO,uCAAG,4BAAAhM,EAAA,yDACTf,EADS,uBAEZqD,MAAM,kCACN9C,EAAQU,KAAK,WAHD,6BAMd2D,GAAY,IACI,IAAZ6H,EAPU,wBAQZF,EAAYD,EAAW,GACvBI,EAAU,MATE,UAUNnN,MAAM,GAAD,OAAIP,EAAOE,IAAX,iBAA+B,CACxCsG,OAAQ,OACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CAAEiH,WAAYf,EAAQvD,GAAIR,MAAO,EAAGQ,GAAE,UAAEuD,EAAQS,SAAS,UAAnB,aAAE,EAAqBhE,OAhBxE,mCAkBQ,IAAXiE,EAlBG,wBAmBZJ,EAASD,EAAQ,GACjBG,EAAYD,EAAW,GACvBI,GAAW,GArBC,UAuBNnN,MAAM,GAAD,OAAIP,EAAOE,IAAX,iBAA+B,CACxCsG,OAAQ,OACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CAAEiH,WAAYf,EAAQvD,GAAIR,OAAQ,MA7B7C,uCAgCZuE,EAAYD,EAAW,GACvBI,GAAW,GAjCC,UAkCNnN,MAAM,GAAD,OAAIP,EAAOE,IAAX,iBAA+B,CACxCsG,OAAQ,OACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CAAEiH,WAAYf,EAAQvD,GAAIR,OAAQ,MAxC7C,QA2CdpD,GAAY,GA3CE,4CAAH,qDA+CP+D,EAAY,uCAAG,WAAOoD,GAAP,SAAAhL,EAAA,0DACff,EADe,gCAEXT,MAAM,GAAD,OAAIP,EAAOE,IAAX,YAA0B,CACnCsG,OAAQ,SACRhG,YAAa,UACbiG,QAAS,CACP,eAAgB,oBAElBE,KAAMC,KAAKC,UAAU,CAAEiH,WAAYf,EAAQvD,OAR5B,2CAAH,sDAcZwE,EAAU,CACd,uBAAM/K,QAAS4K,EAAf,UACc,IAAXJ,EAAe,cAACQ,GAAA,EAAD,IAAiB,cAACC,GAAA,EAAD,IACjC,sBAAMhM,UAAU,iBAAhB,SAAkCkL,OAEpC,uBAAMnK,QAAS8K,EAAf,WACe,IAAZN,EAAgB,cAACU,GAAA,EAAD,IAAoB,cAACC,GAAA,EAAD,IACrC,sBAAMlM,UAAU,iBAAhB,SAAkCoL,OAEpC,sBAA6BrK,QAAS,kBAAMkK,GAASD,IAArD,qBAAU,oBAGV,sBAAMjK,QAAS,kBAAMiG,GAAYD,IAAjC,SACG8D,EAAQ/L,KAAK+B,YAAb,OAA0B/B,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAM+B,UAC/BkG,EACE,iDACgB,IACd,sBAAM/G,UAAU,qBAAqBe,QAAS,kBAAM0G,EAAaoD,IAAjE,iBAFF,SAQA,SAEA,QAKR,OACE,sBAAsB7K,UAAU,cAAcuC,SAAUA,EAAxD,WAEW,OAARuI,QAAQ,IAARA,OAAA,EAAAA,EAAU5G,QAAS,EAClB,cAAC,KAAD,CACE4H,QAASA,EACTK,OAAQ,cAAC,IAAD,CAAM5L,GAAE,mBAAcsK,EAAQ/L,KAAK+B,UAAnC,SAAgDgK,EAAQ/L,KAAK+B,WACrEuL,QAASvB,EAAQA,QACjBwB,SAAUlH,GAAsB0F,EAAQ1C,WAJ1C,SAMG2C,EAASwB,KAAI,SAACC,GAAD,OACZ,cAAC3B,EAAD,CAAkBC,QAAS0B,EAAOxB,SAAUA,EAAUD,SAAUC,EAASyB,QAAO,SAACC,GAAD,OAAOA,EAAEf,YAAca,EAAMjF,aAIjH,cAAC,KAAD,CACEwE,QAASA,EACTK,OAAQ,cAAC,IAAD,CAAM5L,GAAE,mBAAcsK,EAAQ/L,KAAK+B,UAAnC,SAAgDgK,EAAQ/L,KAAK+B,WACrEuL,QAASvB,EAAQA,QACjBwB,SAAUlH,GAAsB0F,EAAQ1C,aAG3C6C,EACC,eAAC,IAAD,CAAM3J,SAAUkJ,EAAhB,UACE,cAAC,IAAKjK,KAAN,CACEkB,KAAK,QACLC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,6BALf,SASE,cAAC+I,GAAD,MAEF,cAAC,IAAD,CAAQ3I,SAAS,SAAjB,sBAEA,OApCI8I,EAAQvD,KC3JPoF,GArBK,SAAC,GAAgC,IAA9B3B,EAA6B,EAA7BA,SAAU4B,EAAmB,EAAnBA,aAC/B,OACE,8BACE,cAAC,KAAD,CACE3M,UAAU,eACVmJ,WAAW,aACXC,WAAYuD,EACZtD,WAAY,SAACwB,GACX,OACE,cAAC,GAAD,CACEA,QAASA,EACTE,SAAUA,EACVD,SAAUC,EAASyB,QAAO,SAACC,GAAD,OAAOA,EAAEf,YAAcb,EAAQvD,cCH/DoD,GAAaC,IAAbD,SA4GOkC,GAzGE,SAAClD,GAChB,IAAM5K,EAAOJ,IACPW,EAAUC,cAEVuN,EAASnD,EAAMb,SAAStH,OAAOlB,MAAM,KACrCiH,EAAKuF,EAAO,GAAGxM,MAAM,KAAK,GAC5ByM,EAAO,MAEPD,EAAO3I,OAAS,IAClB4I,EAAOD,EAAO,GAAGxM,MAAM,KAAK,IAG9B,MAAe0M,IAAKC,UAAbC,EAAP,oBAEMC,EAAiB,QAATJ,EAAiB7J,GAAoB,QAAT6J,EAAiB5J,GAA+BD,GAE1F,EAA0BkK,aAAgBD,EAAO,CAC/CnJ,UAAW,CAAEuD,GAAIyB,SAASzB,GAAKyC,YAAajL,EAAI,OAAGA,QAAH,IAAGA,OAAH,EAAGA,EAAM0B,OAAS,MAD5D5B,EAAR,EAAQA,KAAMG,EAAd,EAAcA,QAOd,EAA4C0E,mBAAS,OAArD,mBAAO2J,EAAP,KAAuBC,EAAvB,KAGM9C,EAAY,uCAAG,WAAOjJ,GAAP,eAAAzB,EAAA,6DACdf,IACHqD,MAAM,qCACN9C,EAAQU,KAAK,WAEP8K,EAAYvJ,EAAZuJ,QALW,SAMbxM,MAAM,GAAD,OAAIP,EAAOE,IAAX,YAA0B,CACnCsG,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBjG,YAAa,UACbmG,KAAMC,KAAKC,UAAU,CAAE0C,QAASzI,EAAK0O,YAAYhG,GAAIuD,QAASA,MAZ7C,OAcnBoC,EAAKM,cAdc,2CAAH,sDAiBZtD,EACJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAM1J,GAAE,UAAKmJ,EAAMb,SAAStJ,UAApB,OAA+BsN,EAAO,IAA9C,SACE,cAAC,IAAKvM,KAAN,CAAqBS,QAAS,kBAAMsM,EAAkB,QAAtD,gBAAe,SAIjB,cAAC,IAAD,CAAM9M,GAAE,UAAKmJ,EAAMb,SAAStJ,UAApB,OAA+BsN,EAAO,GAAtC,aAAR,SACE,cAAC,IAAKvM,KAAN,CAAqBS,QAAS,kBAAMsM,EAAkB,QAAtD,gBAAe,YAOrB,OAAItO,EAAgB,6CAElB,gCACE,cAAC,GAAD,CAAMuH,KAAM1H,EAAK0O,cACjB,uBAAMtN,UAAU,eAAhB,sBACY,IACV,cAAC,KAAD,CAAUmK,QAASF,EAAMG,QAAS,CAAC,SAAnC,SACE,uBAAMpK,UAAU,iBAAhB,UACGoN,EADH,IACmB,cAAC/C,GAAA,EAAD,YAIvB,eAAC,IAAD,CAAMhJ,SAAUkJ,EAAc0C,KAAMA,EAApC,UACE,cAAC,IAAK3M,KAAN,CACEkB,KAAK,UACLC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,+BALf,SASE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAQS,KAAK,UAAUL,SAAS,SAAhC,4BAIkB,QAAnBqL,EACC,cAAC,GAAD,CACErC,SAAUnM,EAAK0O,YAAYvC,SAC3B4B,aAAc/N,EAAK0O,YAAYvC,SAASyB,QAAO,SAACC,GAAD,OAAuB,OAAhBA,EAAEf,eAG1D,cAAC,GAAD,CACEX,SAAUnM,EAAK0O,YAAYvC,SAC3B4B,aAAc/N,EAAK0O,YAAYvC,SAC5ByB,QAAO,SAACC,GAAD,OAAuB,OAAhBA,EAAEf,aAChBoB,MAAK,SAACjN,EAAG2N,GACR,OAAOA,EAAEtC,MAAMtE,UAAUyB,MAAQxI,EAAEqL,MAAMtE,UAAUyB,eCjFlDoF,GA3BK,SAAC/D,GACnB,IAAM7I,EAAW6I,EAAMb,SAAStH,OAAOlB,MAAM,KAAK,GAClD,EAA0BwD,YAASb,GAAe,CAChDe,UAAW,CACTlD,SAAUA,KAFNjC,EAAR,EAAQA,KAMR,GANA,EAAcG,QAMD,OAAO,4CAEpB,IAAMqG,EAAO,IAAIY,KAAKpH,EAAKqF,MAAM,GAAGkE,WAEpC,OACE,yCACStH,EACP,uBAFF,YAGYuE,EAAKsI,eACf,uBAJF,UAKU9O,EAAKqF,MAAM,GAAGnD,MACtB,iCACE,uBADF,UAES,cAAC,IAAD,CAAMP,GAAE,qBAAgBM,EAAhB,MAAR,yBAFT,KAEmE,cAAC,IAAD,CAAMN,GAAE,oBAAeM,EAAf,MAAR,6BCU1D8M,GA5BG,SAACjE,GACjB,IAAM5K,EAAOJ,IACPmO,EAASnD,EAAMb,SAAStJ,SAASc,MAAM,KAC7CwE,QAAQC,IAAI+H,GACZ,IAAMjD,EAAOiD,EAAOA,EAAO3I,OAAS,GAC9BrD,EAAWgM,EAAOA,EAAO3I,OAAS,GAElC4F,ERdsB,GQcZF,EAAO,GAGvB,EAA0B/F,YAASV,GAAyB,CAC1DY,UAAW,CACTlD,SAAUA,EACVkJ,aAAiB,OAAJjL,QAAI,IAAJA,OAAA,EAAAA,EAAM0B,SAAU,GAC7BsJ,OAAQA,EACRE,MRtBwB,KQiBpBpL,EAAR,EAAQA,KASR,OATA,EAAcG,QASM,4CAElB,gCACE,+BAAK8B,EAAL,qBACA,cAAC,GAAD,CAAU6H,MAAO9J,EAAK8J,MAAOC,UAAWmB,Q,UCkB/B8D,GAxCE,SAAClE,GAChB,IAAM5K,EAAOJ,IAEPmO,EAASnD,EAAMb,SAAStJ,SAASc,MAAM,KACvCuJ,EAAOiD,EAAOA,EAAO3I,OAAS,GAC9BrD,EAAWgM,EAAOA,EAAO3I,OAAS,GAElC4F,ETfsB,GSeZF,EAAO,GAGvB,EAA0B/F,YAAST,GAA4B,CAC7DW,UAAW,CACTlD,SAAUA,EACVkJ,YAAajL,EAAI,OAAGA,QAAH,IAAGA,OAAH,EAAGA,EAAM0B,OAAS,GACnCsJ,OAAQA,EACRE,MTvBwB,KSkBpBpL,EAAR,EAAQA,KAQR,OARA,EAAcG,QAQM,4CAElB,8BACGH,EAAKmM,SAAS7G,OAAS,EACtBtF,EAAKmM,SAASuB,KAAI,SAACzB,GACjB,OACE,gCACE,cAAC,GAAD,CAAMvE,KAAMuE,EAAQvE,OACpB,cAAC,GAAD,CAAkBuE,QAASA,EAASE,SAAUF,IAC9C,cAAC,KAAD,UAKN,8BACE,cAAC,KAAD,SC2BKgD,GA1DH,WACV,IAAI/O,EAAOJ,IACLW,EAAUC,cAEV0J,EAAkB3J,EAAQwJ,SAAStJ,SAASc,MAAM,KAClDuJ,EAAOb,SAASC,EAAgBA,EAAgB9E,OAAS,IAEzD4F,EVjBsB,GUiBZF,EAAO,GAIvB,EAA0BuD,aAAgB9J,GAAiB,CACzDU,UAAW,CAAEgG,YAAajL,EAAI,OAAGA,QAAH,IAAGA,OAAH,EAAGA,EAAM0B,OAAS,GAAIsJ,OAAQA,EAAQE,MVtB1C,EUsBwDf,MAHpE,CAAE6E,gBAAiB,CAAEjH,IAAK,CAAEC,MAAO,qBAGiDvF,OAAQ,MADpG3C,EAAR,EAAQA,KAAMG,EAAd,EAAcA,QAmBd,OAbAgP,qBAAU,WACJnP,IACFA,EAAK8J,MAAMsF,SAAQ,SAAC1H,GACqB,OAAnCA,EAAKK,MAAMC,UAAUC,IAAIC,QAC3BR,EAAKK,MAAMC,UAAUC,IAAIC,MAAQ,MAGrClI,EAAK8J,MAAMoE,MAAK,SAACjN,EAAG2N,GAClB,OAAOA,EAAE7G,MAAMC,UAAUC,IAAIC,MAAQjH,EAAE8G,MAAMC,UAAUC,IAAIC,YAG9D,CAAClI,IAEAG,IAAYH,EAAa,6CAEH,IAAtBA,EAAK8J,MAAMxE,OAEX,gCACE,cAAC,KAAD,IACA,sBACElE,UAAU,kBACVe,QAAS,WACH6I,EAAO,GACTvK,EAAQU,KAAR,eAAqB6J,EAAO,KAJlC,SAQE,cAAC,IAAD,UACE,cAACL,GAAA,EAAD,CAAmB5I,MAAO,CAAEC,SAAU,iBAO5C,8BACE,cAAC,GAAD,CAAU8H,MAAO9J,EAAK8J,MAAOC,UAAWmB,O,UCZjCmE,GA1CH,WACV,IAAInP,EAAOJ,IACLW,EAAUC,cAEV0J,EAAkB3J,EAAQwJ,SAAStJ,SAASc,MAAM,KAClDuJ,EAAOb,SAASC,EAAgBA,EAAgB9E,OAAS,IAEzD4F,EXhBsB,GWgBZF,EAAO,GAIvB,EAA0BuD,aAAgB9J,GAAiB,CACzDU,UAAW,CAAEgG,YAAajL,EAAI,OAAGA,QAAH,IAAGA,OAAH,EAAGA,EAAM0B,OAAS,GAAIsJ,OAAQA,EAAQE,MXrB1C,EWqBwDf,MAHpE,CAAEd,UAAW,QAGuE5G,OAAQ,MADpG3C,EAAR,EAAQA,KAIR,OAJA,EAAcG,UAIEH,EAAa,6CACH,IAAtBA,EAAK8J,MAAMxE,OAEX,gCACE,cAAC,KAAD,IACA,sBACElE,UAAU,kBACVe,QAAS,WACH6I,EAAO,GACTvK,EAAQU,KAAR,eAAqB6J,EAAO,KAJlC,SAQE,cAAC,IAAD,UACE,cAACL,GAAA,EAAD,CAAmB5I,MAAO,CAAEC,SAAU,iBAO5C,8BACE,cAAC,GAAD,CAAU8H,MAAO9J,EAAK8J,MAAOC,UAAWmB,OCzBxCoE,GAA2BC,KAA3BD,OAAQE,GAAmBD,KAAnBC,QAASC,GAAUF,KAAVE,MAuEVC,GArEH,WACV,MAAkC7K,oBAAS,GAA3C,mBAAO8K,EAAP,KAAkBC,EAAlB,KACM3F,EAAWrJ,cACbiP,EAAc,GAClBV,qBAAU,WACR,IAAQxO,EAAasJ,EAAbtJ,SACRkP,EAAclP,EAASc,MAAM,KAAK,GAEhCmO,EADkB,WAAhBC,GAA4C,UAAhBA,GAA2C,WAAhBA,GAA4C,WAAhBA,KAKtF,CAAC5F,IAEJ,IAAMpJ,EAAgBC,wBAAc,CAAEC,MAAO,sBAE7C,OACE,qBAAKK,UAAU,MAAf,SACE,eAAC,KAAD,CAAQA,UAAU,aAAlB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAK0O,KAAM,GAAX,SACE,cAACR,GAAD,CAAQlO,UAAU,SAAlB,SACE,cAAC,EAAD,UAIN,cAAC,IAAD,UACE,eAAC,KAAD,CAAQA,UAAU,iBAAlB,UACE,cAAC,IAAD,CAAK2O,GAAI,GAAIC,GAAIL,EAAY,GAAK,GAAlC,SACE,cAACH,GAAD,CAASpO,UAAU,UAAnB,SACE,sBAAKA,UAAU,cAAf,WACIP,GAAiB,qBAAKO,UAAU,WAClC,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6O,OAAK,EAACC,KAAK,IAAIC,cAAc,EAAMC,OAAQ,kBAAM,cAAC,IAAD,CAAUzO,GAAG,cACrE,cAAC,IAAD,CAAOsO,OAAK,EAACC,KAAK,aAAaG,UAAWhB,KAC1C,cAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,aAAaG,UAAWpB,KAC1C,cAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,SAASG,UAAWjK,KACtC,cAAC,IAAD,CAAO6J,OAAK,EAACC,KAAK,UAAUG,UAAWzL,KACvC,cAAC,IAAD,CAAOqL,OAAK,EAACC,KAAK,YAAYG,UAAWC,MACzC,cAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,UAAUG,UAAWxE,KACvC,cAAC,IAAD,CAAOoE,OAAK,EAACC,KAAK,UAAUG,UAAWxF,KACvC,cAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,6BAA6BG,UAAWtB,KAC1D,cAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,4BAA4BG,UAAWrB,KACzD,cAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,QAAQG,UAAWrC,KACrC,cAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,QAAQG,UAAWxB,eAK5Cc,GACC,cAAC,IAAD,CAAKI,GAAI,EAAGC,GAAI,EAAhB,SACE,cAACP,GAAD,CACErO,UAAU,QACVmP,aAAc,SAACC,GACbvK,QAAQC,IAAI,WAEdlD,MAAM,OALR,SAOE,cAAC,EAAD,mB,8BCvEZyN,GAAS,I,OAAIC,GAAc,CAC/BC,IAAI,QAAD,OAAUzR,EAAOI,iBACpBI,YAAa,UACbkR,QAAS,CACPC,WAAW,KAKTC,GAAS,IAAIC,KAAa,CAC9BJ,IAAI,UAAD,OAAYzR,EAAOI,iBACtB0R,MAAO,IAAIC,KACXC,KAAMT,KAIRU,IAASf,OACP,cAAC,IAAD,UACE,cAACgB,GAAA,EAAD,CAAgBN,OAAQA,GAAxB,SACE,cAAC,GAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.6decb326.chunk.js","sourcesContent":["const config = {\r\n  MAGIC_API_KEY: \"pk_live_35FBE7FE41B75731\",\r\n  api: process.env.NODE_ENV === \"production\" ? process.env.REACT_APP_API_URL : \"http://localhost:3001\",\r\n  hasura_endpoint: process.env.NODE_ENV === \"production\" ? process.env.REACT_APP_HASURA_ENDPOINT : \"localhost:8080/v1/graphql\",\r\n}\r\n\r\nexport default config\r\n","import useSWR from \"swr\"\r\nimport config from \"../config\"\r\n\r\nconst fetchUser = (url) => fetch(url, { credentials: \"include\" }).then((res) => res.json())\r\n\r\nexport function useUser() {\r\n  const { data, error } = useSWR(`${config.api}/user`, fetchUser)\r\n  return !data && !error ? { loading: true } : data && data?.user\r\n}\r\n","import { Magic } from \"magic-sdk\"\r\nimport config from \"./config\"\r\nconst magic = new Magic(config.MAGIC_API_KEY)\r\n\r\nexport default magic\r\n","import { Link } from \"react-router-dom\"\r\nimport { useUser } from \"../lib/user\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { useLocation } from \"react-router\"\r\nimport magic from \"../magic\"\r\nimport { Menu } from \"antd\"\r\nimport { PlusOutlined, MenuOutlined } from \"@ant-design/icons\"\r\nimport { Tooltip } from \"antd\"\r\nimport { useMediaQuery } from \"react-responsive\"\r\nimport config from \"../config\"\r\nconst { SubMenu } = Menu\r\n\r\nconst Nav = () => {\r\n  let user = useUser()\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n  const { pathname } = location\r\n\r\n  const minBreakpoint = useMediaQuery({ query: \"(max-width: 650px\" }) //breakpoint where left and right menus touch\r\n\r\n  const logout = async () => {\r\n    await fetch(`${config.api}/logout`, {\r\n      credentials: \"include\",\r\n    })\r\n\r\n    await magic.user.logout()\r\n\r\n    //refresh page\r\n    history.go(0)\r\n    history.push(\"/\")\r\n  }\r\n  return (\r\n    <div className=\"header-nav\">\r\n      <div className=\"header-start\">\r\n        <div className=\"title\">\r\n          <Menu theme=\"dark\" mode=\"horizontal\" disabledOverflow={true} selectedKeys={[pathname.split(\"/\")[1]]}>\r\n            <Menu.Item key=\"home\">\r\n              <Link to=\"/\" key=\"home\">\r\n                Home\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"top\">\r\n              <Link to=\"/top/1\">Top</Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"new\">\r\n              <Link to=\"/new/1\">New</Link>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </div>\r\n      </div>\r\n      {user?.loading ? (\r\n        <div></div>\r\n      ) : user?.issuer ? (\r\n        <div className=\"nav-menu\">\r\n          {!minBreakpoint && (\r\n            <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[pathname.split(\"/\")[1]]}>\r\n              <Tooltip title=\"Create Post\">\r\n                <Menu.Item key=\"submit\">\r\n                  <Link to=\"/submit\" key=\"submit\">\r\n                    <PlusOutlined style={{ fontSize: \"24px\" }} />\r\n                  </Link>\r\n                </Menu.Item>\r\n              </Tooltip>\r\n              <Menu.Item key={user?.username}>\r\n                <Link to={`/user?id=${user.username}`} key=\"profile\">\r\n                  {user.username} ({user.karma})\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"logout\" onClick={logout}>\r\n                <div>Log out</div>\r\n              </Menu.Item>\r\n            </Menu>\r\n          )}\r\n          {minBreakpoint && (\r\n            <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[pathname.split(\"/\")[1]]} triggerSubMenuAction=\"click\">\r\n              <SubMenu key=\"SubMenu\" icon={<MenuOutlined style={{ fontSize: \"20px\" }} />}>\r\n                <Tooltip title=\"Create Post\">\r\n                  <Menu.Item key=\"submit\">\r\n                    <Link to=\"/submit\" key=\"submit\">\r\n                      <PlusOutlined style={{ fontSize: \"24px\" }} />\r\n                    </Link>\r\n                  </Menu.Item>\r\n                </Tooltip>\r\n                <Menu.Item key=\"profile\">\r\n                  <Link to={`/user?id=${user.username}`} key=\"profile\">\r\n                    {user.username} ({user.karma})\r\n                  </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"logout\" onClick={logout}>\r\n                  <div>Log out</div>\r\n                </Menu.Item>\r\n              </SubMenu>\r\n            </Menu>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"nav-menu\">\r\n          {!minBreakpoint && (\r\n            <Menu theme=\"dark\" mode=\"horizontal\" disabledOverflow={true} selectedKeys={[pathname.split(\"/\")[1]]}>\r\n              <Menu.Item key=\"login\">\r\n                <Link to=\"/login\" key=\"login\">\r\n                  Login\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"signup\">\r\n                <Link to=\"/signup\" key=\"signup\">\r\n                  Sign up\r\n                </Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          )}\r\n          {minBreakpoint && (\r\n            <Menu theme=\"dark\" mode=\"horizontal\" disabledOverflow={true} selectedKeys={[pathname.split(\"/\")[1]]}>\r\n              <SubMenu key=\"SubMenu\" icon={<MenuOutlined style={{ fontSize: \"20px\" }} />}>\r\n                <Menu.Item key=\"login\">\r\n                  <Link to=\"/login\" key=\"login\">\r\n                    Login\r\n                  </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"signup\">\r\n                  <Link to=\"/signup\" key=\"signup\">\r\n                    Signup\r\n                  </Link>\r\n                </Menu.Item>\r\n              </SubMenu>\r\n            </Menu>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import { Button, Form, Input, Card } from \"antd\"\r\nimport { SearchOutlined } from \"@ant-design/icons\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { useUser } from \"../lib/user\"\r\n\r\nconst Side = ({ handleSearch }) => {\r\n  const user = useUser()\r\n  let history = useHistory()\r\n\r\n  const handleSubmit = (values) => {\r\n    const { search } = values\r\n    history.push(`/search?q=${search}/1`)\r\n  }\r\n\r\n  return (\r\n    <div className=\"side-container\">\r\n      <div className=\"side-search-div\">\r\n        <Form onFinish={handleSubmit} className=\"side-search-bar\">\r\n          <Form.Item\r\n            name=\"search\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please no empty\",\r\n              },\r\n            ]}\r\n            style={{ width: \"80%\", marginRight: \"1rem\" }}\r\n          >\r\n            <Input placeholder=\"search\" className=\"side-search-input\" />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button htmlType=\"submit\" shape=\"circle\" icon={<SearchOutlined />} />\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n      <div className=\"side-card\">\r\n        <Card bordered={false}>\r\n          <div\r\n            onClick={() => {\r\n              if (!user) {\r\n                alert(\"You must be signed in to submit a link!\")\r\n                history.push(\"/login\")\r\n              }\r\n            }}\r\n          >\r\n            <Link to=\"/submit\">\r\n              <Button type=\"primary\" className=\"side-card-submit\">\r\n                Submit a link\r\n              </Button>\r\n            </Link>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Side\r\n","import React from \"react\"\r\nimport { Button, Form, Input, PageHeader } from \"antd\"\r\nimport { MailOutlined, UserOutlined, SendOutlined } from \"@ant-design/icons\"\r\n\r\nconst SignupForm = ({ handleSignup, disabled }) => {\r\n  const handleSubmit = (values) => {\r\n    const { email, username } = values\r\n    handleSignup(email, username)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <PageHeader title=\"Sign Up\" className=\"form-header\" />\r\n      <Form onFinish={handleSubmit}>\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your email!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input prefix={<MailOutlined className=\"site-form-email-icon\" />} placeholder=\"Email\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"username\"\r\n          disabled={disabled}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your username!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input prefix={<UserOutlined className=\"site-form-user-icon\" />} placeholder=\"Username\" />\r\n        </Form.Item>\r\n        <Button type=\"primary\" disabled={disabled} htmlType=\"submit\" icon={<SendOutlined />} className=\"site-form-submit-button\">\r\n          Sign up\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignupForm\r\n","import { gql } from \"@apollo/client\"\r\nexport const CHECK_DUPLICATE = gql`\r\n  query checkDuplicate($email: String!, $username: String!) {\r\n    users(where: { _or: [{ username: { _eq: $username } }, { email: { _eq: $email } }] }) {\r\n      email\r\n      username\r\n    }\r\n  }\r\n`\r\n\r\nexport const CHECK_EMAIL = gql`\r\n  query checkEmail($email: String!) {\r\n    users(where: { email: { _eq: $email } }) {\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_USER_DATA = gql`\r\n  query get_user_data($username: String!) {\r\n    users(where: { username: { _eq: $username } }) {\r\n      createdAt\r\n      karma\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_ALL_POSTS = gql`\r\n  query getPosts {\r\n    posts {\r\n      id\r\n      title\r\n      url\r\n      user {\r\n        issuer\r\n        username\r\n      }\r\n      createdAt\r\n      votes {\r\n        id\r\n        value\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_POST = gql`\r\n  subscription getPost($id: Int!, $user_issuer: String) {\r\n    posts_by_pk(id: $id) {\r\n      createdAt\r\n      id\r\n      title\r\n      url\r\n      user {\r\n        issuer\r\n        username\r\n      }\r\n      votes: votes_aggregate {\r\n        aggregate {\r\n          sum {\r\n            value\r\n          }\r\n        }\r\n      }\r\n      userVotes: votes(where: { user_issuer: { _eq: $user_issuer } }) {\r\n        value\r\n      }\r\n      comments(order_by: { createdAt: desc }) {\r\n        id\r\n        parent_id\r\n        comment\r\n        createdAt\r\n        post_id\r\n        user {\r\n          username\r\n        }\r\n        userLike: comments_votes(where: { user_issuer: { _eq: $user_issuer } }) {\r\n          value\r\n          id\r\n        }\r\n        likes: comments_votes_aggregate(where: { value: { _eq: 1 } }) {\r\n          aggregate {\r\n            count\r\n          }\r\n        }\r\n        dislikes: comments_votes_aggregate(where: { value: { _eq: -1 } }) {\r\n          aggregate {\r\n            count\r\n          }\r\n        }\r\n      }\r\n      comments_aggregate {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const GET_POST_COMMENTS_SORTED_TOP = gql`\r\n  subscription getPost($id: Int!, $user_issuer: String) {\r\n    posts_by_pk(id: $id) {\r\n      createdAt\r\n      id\r\n      title\r\n      url\r\n      user {\r\n        issuer\r\n        username\r\n      }\r\n      votes: votes_aggregate {\r\n        aggregate {\r\n          sum {\r\n            value\r\n          }\r\n        }\r\n      }\r\n      userVotes: votes(where: { user_issuer: { _eq: $user_issuer } }) {\r\n        value\r\n      }\r\n      comments(order_by: { comments_votes_aggregate: { sum: { value: desc } } }) {\r\n        id\r\n        parent_id\r\n        comment\r\n        createdAt\r\n        post_id\r\n        user {\r\n          username\r\n        }\r\n        userLike: comments_votes(where: { user_issuer: { _eq: $user_issuer } }) {\r\n          value\r\n          id\r\n        }\r\n        likes: comments_votes_aggregate(where: { value: { _eq: 1 } }) {\r\n          aggregate {\r\n            count\r\n          }\r\n        }\r\n        dislikes: comments_votes_aggregate(where: { value: { _eq: -1 } }) {\r\n          aggregate {\r\n            count\r\n          }\r\n        }\r\n      }\r\n      comments_aggregate {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const GET_POSTS_FROM_USERNAME = gql`\r\n  query get_posts_from_username($user_issuer: String, $username: String!, $limit: Int, $offset: Int) {\r\n    posts(order_by: { createdAt: desc }, limit: $limit, offset: $offset, where: { user: { username: { _eq: $username } } }) {\r\n      id\r\n      title\r\n      url\r\n      createdAt\r\n      votes: votes_aggregate {\r\n        aggregate {\r\n          sum {\r\n            value\r\n          }\r\n        }\r\n      }\r\n      userVotes: votes(where: { user_issuer: { _eq: $user_issuer } }) {\r\n        value\r\n      }\r\n      user {\r\n        issuer\r\n        username\r\n      }\r\n      comments_aggregate {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const GET_COMMENTS_FROM_USERNAME = gql`\r\n  query get_comments_from_username($username: String!, $user_issuer: String!, $limit: Int, $offset: Int) {\r\n    comments(where: { user: { username: { _eq: $username } } }, order_by: { createdAt: desc }, limit: $limit, offset: $offset) {\r\n      comment\r\n      createdAt\r\n      id\r\n      parent_id\r\n      user {\r\n        issuer\r\n        username\r\n      }\r\n      userLike: comments_votes(where: { user_issuer: { _eq: $user_issuer } }) {\r\n        value\r\n        id\r\n      }\r\n      likes: comments_votes_aggregate(where: { value: { _eq: 1 } }) {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n      dislikes: comments_votes_aggregate(where: { value: { _eq: -1 } }) {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n      post {\r\n        createdAt\r\n        id\r\n        title\r\n        url\r\n        id\r\n        title\r\n        url\r\n        createdAt\r\n        votes: votes_aggregate {\r\n          aggregate {\r\n            sum {\r\n              value\r\n            }\r\n          }\r\n        }\r\n        comments {\r\n          id\r\n        }\r\n        userVotes: votes(where: { user_issuer: { _eq: $user_issuer } }) {\r\n          value\r\n        }\r\n        user {\r\n          username\r\n        }\r\n        comments_aggregate {\r\n          aggregate {\r\n            count\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const SUBSCRIBE_POSTS = gql`\r\n  subscription subscribe_posts($user_issuer: String, $order: posts_order_by!, $limit: Int, $offset: Int, $search: String!) {\r\n    posts(\r\n      order_by: [$order]\r\n      limit: $limit\r\n      offset: $offset\r\n      where: { _or: [{ title: { _iregex: $search } }, { url: { _iregex: $search } }] }\r\n    ) {\r\n      id\r\n      title\r\n      url\r\n      createdAt\r\n      votes: votes_aggregate {\r\n        aggregate {\r\n          sum {\r\n            value\r\n          }\r\n        }\r\n      }\r\n      userVotes: votes(where: { user_issuer: { _eq: $user_issuer } }) {\r\n        value\r\n      }\r\n      user {\r\n        issuer\r\n        username\r\n      }\r\n      comments_aggregate {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const SEARCH_POSTS_SORTED_NEW = gql`\r\n  query search_posts_sorted_new($user_issuer: String, $limit: Int, $offset: Int, $search: String!) {\r\n    posts(\r\n      order_by: { createdAt: desc }\r\n      limit: $limit\r\n      offset: $offset\r\n      where: { _or: [{ title: { _iregex: $search } }, { url: { _iregex: $search } }] }\r\n    ) {\r\n      id\r\n      title\r\n      url\r\n      createdAt\r\n      votes: votes_aggregate {\r\n        aggregate {\r\n          sum {\r\n            value\r\n          }\r\n        }\r\n      }\r\n      userVotes: votes(where: { user_issuer: { _eq: $user_issuer } }) {\r\n        value\r\n      }\r\n      user {\r\n        issuer\r\n        username\r\n      }\r\n      comments_aggregate {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const SEARCH_POSTS_SORTED_TOP = gql`\r\n  query search_posts_sorted_top($user_issuer: String, $limit: Int, $offset: Int, $search: String!) {\r\n    posts(\r\n      order_by: { votes_aggregate: { sum: { value: desc } } }\r\n      limit: $limit\r\n      offset: $offset\r\n      where: { _or: [{ title: { _iregex: $search } }, { url: { _iregex: $search } }] }\r\n    ) {\r\n      id\r\n      title\r\n      url\r\n      createdAt\r\n      votes: votes_aggregate {\r\n        aggregate {\r\n          sum {\r\n            value\r\n          }\r\n        }\r\n      }\r\n      userVotes: votes(where: { user_issuer: { _eq: $user_issuer } }) {\r\n        value\r\n      }\r\n      user {\r\n        issuer\r\n        username\r\n      }\r\n      comments_aggregate {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import { useState } from \"react\"\r\nimport SignUpForm from \"../components/SignupForm\"\r\nimport magic from \"../magic\"\r\nimport { useQuery } from \"@apollo/client\"\r\nimport { message } from \"antd\"\r\nimport { CHECK_DUPLICATE } from \"../lib/queries\"\r\nimport { useHistory } from \"react-router\"\r\nimport config from \"../config\"\r\n\r\n//send query here?\r\n\r\nconst SignUp = () => {\r\n  const history = useHistory()\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n  //used to get result from checking duplicate email/username\r\n  const useImperativeQuery = (query) => {\r\n    const { refetch } = useQuery(query, { skip: true }) //useLazyQuery\r\n\r\n    const imperativelyCallQuery = (variables) => {\r\n      return refetch(variables)\r\n    }\r\n\r\n    return imperativelyCallQuery\r\n  }\r\n\r\n  const checkDuplicate = useImperativeQuery(CHECK_DUPLICATE)\r\n\r\n  const handleSignup = async (email, username) => {\r\n    //check email\r\n    setDisabled(true) //disable email button so user can't submit multiple times\r\n    const { data } = await checkDuplicate({ email: email, username: username })\r\n\r\n    //validate email and username\r\n\r\n    if (data.users.length !== 0) {\r\n      if (email === data.users[0].email) message.error(\"This email address is already being used\") //red text above the top\r\n      if (username === data.users[0].username) message.error(\"This username is already being used\")\r\n      setDisabled(false)\r\n      return\r\n    }\r\n\r\n    //else\r\n    //magic link sent to user\r\n    //handles email validation\r\n    const didToken = await magic.auth.loginWithMagicLink({\r\n      email,\r\n    })\r\n\r\n    // Validate didToken with server\r\n    const res = await fetch(`${config.api}/signup`, {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + didToken,\r\n      },\r\n      body: JSON.stringify({ username }), // Send the username\r\n    })\r\n    if (res.status === 200) {\r\n      console.log(\"sign up successful\")\r\n    }\r\n    setDisabled(false)\r\n    history.push(\"/\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"signup-page\">\r\n      <SignUpForm handleSignup={handleSignup} disabled={disabled} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignUp\r\n","import React from \"react\"\r\nimport { Button, Form, Input, PageHeader } from \"antd\"\r\nimport { MailOutlined } from \"@ant-design/icons\"\r\n\r\nconst SignupForm = ({ handleLogin, disabled }) => {\r\n  const handleSubmit = (values) => {\r\n    const { email } = values\r\n    handleLogin(email)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <PageHeader title=\"Log in\" className=\"form-header\" />\r\n      <Form onFinish={handleSubmit}>\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your email!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input prefix={<MailOutlined className=\"site-form-email-icon\" />} placeholder=\"Email\" />\r\n        </Form.Item>\r\n        <Button type=\"primary\" disabled={disabled} htmlType=\"submit\" className=\"site-form-submit-button\">\r\n          Log in\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignupForm\r\n","import { useQuery } from \"@apollo/client\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport LoginForm from \"../components/LoginForm\"\r\nimport { CHECK_EMAIL } from \"../lib/queries\"\r\nimport magic from \"../magic\"\r\nimport { message } from \"antd\"\r\nimport config from \"../config\"\r\n\r\n//if user presses login and already logged in, send them to profile page\r\n\r\nconst Login = () => {\r\n  //used to get result from checking duplicate email/username\r\n  const useImperativeQuery = (query) => {\r\n    const { refetch } = useQuery(query, { skip: true }) //useLazyQuery\r\n\r\n    const imperativelyCallQuery = (variables) => {\r\n      return refetch(variables)\r\n    }\r\n\r\n    return imperativelyCallQuery\r\n  }\r\n\r\n  const history = useHistory()\r\n  const checkEmail = useImperativeQuery(CHECK_EMAIL)\r\n\r\n  const handleLogin = async (email) => {\r\n    const { data } = await checkEmail({ email: email })\r\n    //if email does not exist\r\n    if (data.users.length === 0) {\r\n      message.error(\"This email address is not in the system.\")\r\n      return\r\n    }\r\n\r\n    //login here\r\n    //magic link sent to user\r\n    //handles email validation\r\n    const didToken = await magic.auth.loginWithMagicLink({\r\n      email,\r\n    })\r\n    // Validate didToken with server\r\n    const res = await fetch(`${config.api}/login`, {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + didToken,\r\n      },\r\n    })\r\n\r\n    if (res.status === 200) {\r\n      console.log(\"login successful\")\r\n    }\r\n    history.push(\"/\")\r\n    history.go(0)\r\n  }\r\n  return (\r\n    <div className=\"login-page\">\r\n      <LoginForm handleLogin={handleLogin} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","function timeDifference(current, previous) {\r\n  const milliSecondsPerMinute = 60 * 1000\r\n  const milliSecondsPerHour = milliSecondsPerMinute * 60\r\n  const milliSecondsPerDay = milliSecondsPerHour * 24\r\n  const milliSecondsPerMonth = milliSecondsPerDay * 30\r\n  const milliSecondsPerYear = milliSecondsPerDay * 365\r\n\r\n  const elapsed = current - previous\r\n\r\n  if (elapsed < milliSecondsPerMinute / 3) {\r\n    return \"just now\"\r\n  }\r\n\r\n  if (elapsed < milliSecondsPerMinute) {\r\n    return \"less than 1 min ago\"\r\n  } else if (elapsed < milliSecondsPerHour) {\r\n    return Math.round(elapsed / milliSecondsPerMinute) + \" min ago\"\r\n  } else if (elapsed < milliSecondsPerDay) {\r\n    return Math.round(elapsed / milliSecondsPerHour) + \" hours ago\"\r\n  } else if (elapsed < milliSecondsPerMonth) {\r\n    return Math.round(elapsed / milliSecondsPerDay) + \" days ago\"\r\n  } else if (elapsed < milliSecondsPerYear) {\r\n    return Math.round(elapsed / milliSecondsPerMonth) + \" months ago\"\r\n  } else {\r\n    return Math.round(elapsed / milliSecondsPerYear) + \" years ago\"\r\n  }\r\n}\r\n\r\nexport function timeDifferenceForDate(date) {\r\n  const now = new Date().getTime()\r\n  const updated = new Date(date).getTime()\r\n  return timeDifference(now, updated)\r\n}\r\n","export const urlContains = (url, parameter) => {\r\n  return url.includes(parameter)\r\n}\r\n\r\nexport const getHostName = (url) => {\r\n  return url.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, \"\").split(\"/\")[0]\r\n}\r\n","import { useState } from \"react\"\r\nimport { timeDifferenceForDate } from \"../utils/timeDifference\"\r\nimport { List, Button } from \"antd\"\r\nimport { UpCircleTwoTone, DownCircleTwoTone, LinkOutlined } from \"@ant-design/icons\"\r\nimport { useUser } from \"../lib/user\"\r\nimport { useHistory, Link } from \"react-router-dom\"\r\nimport config from \"../config\"\r\nimport { getHostName } from \"../utils/utils\"\r\n\r\nconst Post = ({ post, selected, setSelected, index }) => {\r\n  const user = useUser()\r\n  const history = useHistory()\r\n\r\n  const totalVotes = post.votes?.aggregate?.sum.value || 0\r\n\r\n  const [confirm, setConfirm] = useState(false)\r\n  const [deleteText, setDeleteText] = useState(\"delete\")\r\n\r\n  const upvote = async (item) => {\r\n    if (!user) {\r\n      alert(\"You must be signed in to vote!\")\r\n      history.push(\"/signup\")\r\n      return\r\n    }\r\n    await fetch(`${config.api}/vote`, {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ post_id: item.id, value: 1, poster: post.user.issuer }), // Send the variables\r\n    })\r\n  }\r\n\r\n  //if was upvote, change to downvote\r\n  //if was downvote, remove downvote\r\n  const downvote = async (item) => {\r\n    if (!user) {\r\n      alert(\"You must be signed in to vote!\")\r\n      //open signup modal eventually\r\n      history.push(\"/signup\")\r\n      return\r\n    }\r\n    await fetch(`${config.api}/vote`, {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ post_id: item.id, value: -1, poster: post.user.issuer }), // Send the variables\r\n    })\r\n  }\r\n\r\n  const handleDelete = async (item) => {\r\n    if (user) {\r\n      await fetch(`${config.api}/post`, {\r\n        method: \"DELETE\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ post_id: item.id }), // Send the variables\r\n      })\r\n\r\n      setDeleteText(\"deleted\")\r\n    }\r\n  }\r\n\r\n  let userVote = 0\r\n  if (post.userVotes) {\r\n    userVote = post?.userVotes[0]?.value\r\n  }\r\n  //3 button cases: if user upvoted, if user downvoted, else no vote\r\n  return (\r\n    <div\r\n      className={selected === true ? \"post-selected\" : \"post\"}\r\n      onClick={() => {\r\n        if (typeof setSelected === \"function\") setSelected(post.id)\r\n      }}\r\n    >\r\n      <List.Item>\r\n        <div className=\"post-index\">{index}.</div>\r\n        <div>\r\n          {userVote === 1 ? (\r\n            <div className=\"vote\">\r\n              <Button\r\n                type=\"link\"\r\n                htmlType=\"submit\"\r\n                icon={<UpCircleTwoTone twoToneColor=\"#52c41a\" />}\r\n                onClick={() => upvote(post)}\r\n              />\r\n              <span className=\"totalVotesUp\">{totalVotes}</span>\r\n              <Button type=\"link\" htmlType=\"submit\" icon={<DownCircleTwoTone />} onClick={() => downvote(post)} />\r\n            </div>\r\n          ) : userVote === -1 ? (\r\n            <div className=\"vote\">\r\n              <Button type=\"link\" htmlType=\"submit\" icon={<UpCircleTwoTone />} onClick={() => upvote(post)} />\r\n              <span className=\"totalVotesDown\">{totalVotes}</span>\r\n              <Button\r\n                type=\"link\"\r\n                htmlType=\"submit\"\r\n                icon={<DownCircleTwoTone twoToneColor=\"#eb2f96\" />}\r\n                onClick={() => downvote(post)}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"vote\">\r\n              <Button type=\"link\" htmlType=\"submit\" icon={<UpCircleTwoTone />} onClick={() => upvote(post)} />\r\n              <span className=\"totalVotes\">{totalVotes}</span>\r\n              <Button type=\"link\" htmlType=\"submit\" icon={<DownCircleTwoTone />} onClick={() => downvote(post)} />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"thumbnail\">\r\n          <List.Item>\r\n            <LinkOutlined />\r\n          </List.Item>\r\n        </div>\r\n        <List.Item.Meta\r\n          title={<a href={`//${post.url}`}>{post.title} (getHostName(post.url))</a>}\r\n          description={\r\n            <p>\r\n              by <Link to={`/user?id=${post.user.username}`}>{post.user.username}</Link> {timeDifferenceForDate(post.createdAt)} |{\" \"}\r\n              <Link to={`/post?id=${post.id}`}>{post.comments_aggregate.aggregate.count} comments</Link>{\" \"}\r\n              {post.user.username === user?.username ? (\r\n                <span onClick={() => setConfirm(!confirm)}>\r\n                  |{\" \"}\r\n                  {confirm ? (\r\n                    <span>\r\n                      are you sure?{\" \"}\r\n                      <span className=\"deleteConfirmation\" onClick={() => handleDelete(post)}>\r\n                        yes\r\n                      </span>\r\n                      /no\r\n                    </span>\r\n                  ) : (\r\n                    deleteText\r\n                  )}\r\n                </span>\r\n              ) : null}\r\n            </p>\r\n          }\r\n        />\r\n      </List.Item>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","import { List } from \"antd\"\r\nimport Post from \"./Post\"\r\nimport { useState } from \"react\"\r\nimport { useHistory } from \"react-router\"\r\nimport { ArrowRightOutlined, ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport { Button } from \"antd\"\r\nimport { useMediaQuery } from \"react-responsive\"\r\nimport Side from \"./Side\"\r\nimport { LINKS_PER_PAGE } from \"../lib/constants\"\r\nimport { urlContains } from \"../utils/utils\"\r\n//given posts json, display them all with antd list\r\n\r\nconst PostList = ({ posts, pageIndex }) => {\r\n  const SEARCH = \"search\"\r\n  const SUBMITTED = \"submitted\"\r\n  const COMMENTS = \"comments\"\r\n  //graphql call here?\r\n  const history = useHistory()\r\n\r\n  const url = history.location.pathname\r\n\r\n  let prevLink, nextLink, pageNumber\r\n\r\n  //calc prev and next links for navigation buttons\r\n  //move to different function?\r\n  if (urlContains(url, SEARCH)) {\r\n    const newSearch = history.location.search.split(\"/\")[0] //base pathname url before first /\r\n    pageNumber = parseInt(history.location.search.split(\"/\")[1]) //current page number\r\n    const prevPage = pageNumber - 1\r\n    const nextPage = pageNumber + 1\r\n    prevLink = url + newSearch + \"/\" + prevPage\r\n    nextLink = url + newSearch + \"/\" + nextPage\r\n  } else if (urlContains(url, SUBMITTED) || urlContains(url, COMMENTS)) {\r\n    const pageIndexParams = url.split(\"/\") //splitting up url params\r\n    pageNumber = parseInt(pageIndexParams[pageIndexParams.length - 1]) //page number\r\n    const username = pageIndexParams[pageIndexParams.length - 2] //username\r\n    prevLink = \"/submitted/\" + username + \"/\" + (pageNumber - 1)\r\n    nextLink = \"/submitted/\" + username + \"/\" + (pageNumber + 1)\r\n  } else {\r\n    const pageIndexParams = url.split(\"/\") //splitting up url params\r\n    pageNumber = parseInt(pageIndexParams[pageIndexParams.length - 1]) //page number\r\n    const order = pageIndexParams[pageIndexParams.length - 2] //page sort\r\n    prevLink = \"/\" + order + \"/\" + (pageNumber - 1)\r\n    nextLink = \"/\" + order + \"/\" + (pageNumber + 1)\r\n  }\r\n\r\n  const [selected, setSelected] = useState(null) //current selected post id\r\n  const minBreakpoint = useMediaQuery({ query: \"(max-width: 768px\" })\r\n\r\n  return (\r\n    <div>\r\n      {minBreakpoint && !urlContains(url, SEARCH) && (\r\n        <div clasName=\"small-side\">\r\n          <Side />\r\n        </div>\r\n      )}\r\n      <List\r\n        itemLayout=\"horizontal\"\r\n        dataSource={posts}\r\n        renderItem={(item) => {\r\n          return (\r\n            <div>\r\n              <div className=\"small-spacer\"></div>\r\n              <Post\r\n                post={item}\r\n                key={item.id}\r\n                selected={selected === item.id}\r\n                setSelected={setSelected}\r\n                index={posts.indexOf(item) + pageIndex + 1}\r\n              />\r\n            </div>\r\n          )\r\n        }}\r\n      />\r\n      <div className=\"navigation-button\">\r\n        {pageNumber > 1 ? (\r\n          <div\r\n            className=\"previous-button\"\r\n            onClick={() => {\r\n              if (pageNumber > 1) {\r\n                history.push(prevLink)\r\n              }\r\n            }}\r\n          >\r\n            <Button>\r\n              <ArrowLeftOutlined style={{ fontSize: \"20px\" }} />\r\n            </Button>\r\n          </div>\r\n        ) : null}\r\n        {posts.length === LINKS_PER_PAGE ? (\r\n          <div\r\n            className=\"next-button\"\r\n            onClick={() => {\r\n              history.push(nextLink)\r\n            }}\r\n          >\r\n            <Button>\r\n              <ArrowRightOutlined style={{ fontSize: \"20px\" }} />\r\n            </Button>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostList\r\n","export const LINKS_PER_PAGE = 5\r\n","import { Button, Form, Input, Dropdown, Menu } from \"antd\"\r\nimport { SearchOutlined, DownOutlined } from \"@ant-design/icons\"\r\nimport { useHistory, Link } from \"react-router-dom\"\r\nimport PostList from \"../components/PostList\"\r\nimport { useQuery } from \"@apollo/client\"\r\nimport { SEARCH_POSTS_SORTED_NEW, SEARCH_POSTS_SORTED_TOP } from \"../lib/queries\"\r\nimport { useUser } from \"../lib/user\"\r\nimport { LINKS_PER_PAGE } from \"../lib/constants\"\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport { Empty } from \"antd\"\r\n\r\nconst Search = (props) => {\r\n  const user = useUser()\r\n  let history = useHistory()\r\n\r\n  const urlPieces = props.location.search.split(\"&\") //split the url up according to &\r\n\r\n  let page = 1 //page number\r\n  let order = \"new\"\r\n\r\n  const pageIndexParams = urlPieces[0].split(\"/\") //splitting up url params\r\n  if (urlPieces.length > 1) {\r\n    page = urlPieces[1].split(\"=\")[1].split(\"/\")[1]\r\n    order = urlPieces[1].split(\"=\")[1].split(\"/\")[0]\r\n  } else {\r\n    page = parseInt(pageIndexParams[pageIndexParams.length - 1])\r\n  }\r\n\r\n  const search = pageIndexParams[0].split(\"=\")[1] //search query is always here\r\n\r\n  const SEARCH_QUERY = order === \"new\" ? SEARCH_POSTS_SORTED_NEW : SEARCH_POSTS_SORTED_TOP\r\n\r\n  const offset = (page - 1) * LINKS_PER_PAGE\r\n  const limit = LINKS_PER_PAGE\r\n\r\n  const { data, loading } = useQuery(SEARCH_QUERY, {\r\n    variables: { user_issuer: user ? user?.issuer : \"\", offset: offset, limit: limit, search: search },\r\n  })\r\n\r\n  const menu = (\r\n    <Menu>\r\n      <Link to={`${urlPieces[0]}/1`}>\r\n        <Menu.Item key=\"new\">new</Menu.Item>\r\n      </Link>\r\n      <Link to={`${pageIndexParams[0]}&sort=top/1`}>\r\n        <Menu.Item key=\"top\">top</Menu.Item>\r\n      </Link>\r\n    </Menu>\r\n  )\r\n\r\n  const handleSubmit = (values) => {\r\n    const { search } = values\r\n\r\n    history.push(`/search?q=${search}/1`)\r\n  }\r\n  if (loading || !data) return <div>loading..</div>\r\n  if (data.posts.length === 0)\r\n    return (\r\n      <div>\r\n        <Empty />\r\n        <span\r\n          className=\"previous-button\"\r\n          onClick={() => {\r\n            if (page > 1) {\r\n              history.push(`/search${history.location.search.split(\"/\")[0]}/${page - 1}`)\r\n            }\r\n          }}\r\n        >\r\n          <Button>\r\n            <ArrowLeftOutlined style={{ fontSize: \"20px\" }} />\r\n          </Button>\r\n        </span>\r\n      </div>\r\n    )\r\n  return (\r\n    <div>\r\n      <Form onFinish={handleSubmit} className=\"search-form\">\r\n        <Form.Item\r\n          // label=\"Search\"\r\n          name=\"search\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please no empty\",\r\n            },\r\n          ]}\r\n          initialValue={search}\r\n        >\r\n          <Input placeholder=\"search\" value=\"forceds\" />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button htmlType=\"submit\" shape=\"circle\" icon={<SearchOutlined />} />\r\n        </Form.Item>\r\n      </Form>\r\n      <span className=\"comment-sort\">\r\n        sorted by{\" \"}\r\n        <Dropdown overlay={menu} trigger={[\"click\"]}>\r\n          <span className=\"comment-select\">\r\n            {order} <DownOutlined />\r\n          </span>\r\n        </Dropdown>\r\n      </span>\r\n      <div>\r\n        <PostList posts={data?.posts} pageIndex={offset} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React from \"react\"\r\nimport { Button, Form, Input } from \"antd\"\r\nimport { PageHeader } from \"antd\"\r\n\r\nconst SubmitForm = ({ handleSubmit }) => {\r\n  const handleFormSubmit = (values) => {\r\n    const { title, url } = values\r\n    handleSubmit(title, url)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <PageHeader title=\"Submit link\" className=\"form-header\" />\r\n      <Form onFinish={handleFormSubmit}>\r\n        <Form.Item\r\n          label=\"Title\"\r\n          name=\"title\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Title field must not be empty\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"URL\"\r\n          name=\"url\"\r\n          // add url validation rule\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Url field must not be empty\",\r\n            },\r\n            // { type: \"url\", warningOnly: true },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\" className=\"site-form-submit-button\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SubmitForm\r\n","import SubmitForm from \"../components/SubmitForm\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport config from \"../config\"\r\nconst Submit = () => {\r\n  const history = useHistory()\r\n\r\n  const handleSubmit = async (title, url) => {\r\n    await fetch(`${config.api}/post`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify({ title, url }), // Send the title, url\r\n    })\r\n    console.log(\"submittd\")\r\n    history.push(\"/\") //send to home screen\r\n    // history.go(0)\r\n  }\r\n  return (\r\n    <div className=\"submit-page\">\r\n      <SubmitForm handleSubmit={handleSubmit} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Submit\r\n","import { useState } from \"react\"\r\nimport { Button, Comment, Input, Form } from \"antd\"\r\nimport { DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled } from \"@ant-design/icons\"\r\nimport { useUser } from \"../lib/user\"\r\nimport { useHistory } from \"react-router\"\r\nimport { timeDifferenceForDate } from \"../utils/timeDifference\"\r\nimport { Link } from \"react-router-dom\"\r\nimport config from \"../config\"\r\n\r\nconst { TextArea } = Input\r\n\r\nconst CommentComponent = ({ comment, children, comments }) => {\r\n  const user = useUser()\r\n  const history = useHistory()\r\n  const [open, setOpen] = useState(false) //reply box is open or not\r\n  const [confirm, setConfirm] = useState(false) //for delete\r\n  const [likes, setLikes] = useState(comment.likes.aggregate.count)\r\n  const [dislikes, setDislikes] = useState(comment.dislikes.aggregate.count)\r\n  const [action, setAction] = useState(comment.userLike[0]?.value || null)\r\n  const [disabled, setDisabled] = useState(false) //to prevent double clicking\r\n  //user replies to comment\r\n  //submit comment\r\n\r\n  const handleSubmit = async (values) => {\r\n    if (!user) {\r\n      alert(\"You must be signed in to comment!\")\r\n      history.push(\"/login\")\r\n    }\r\n    const { reply } = values\r\n    await fetch(`${config.api}/comment`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify({ post_id: comment.post_id, comment: reply, parent_id: comment.id }),\r\n    })\r\n    setOpen(!open)\r\n    history.go(0)\r\n  }\r\n\r\n  const like = async () => {\r\n    if (!user) {\r\n      alert(\"You must be signed in to vote!\")\r\n      history.push(\"/signup\")\r\n      return\r\n    }\r\n    setDisabled(true)\r\n    if (action === 1) {\r\n      setLikes(likes - 1)\r\n      setAction(null)\r\n      await fetch(`${config.api}/comment-vote`, {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ comment_id: comment.id, value: 0, id: comment.userLike[0]?.id }),\r\n      })\r\n    } else if (action === -1) {\r\n      setLikes(likes + 1)\r\n      setDislikes(dislikes - 1)\r\n      setAction(1)\r\n      //send request to add vote to db\r\n      await fetch(`${config.api}/comment-vote`, {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ comment_id: comment.id, value: 1 }),\r\n      })\r\n    } else {\r\n      setLikes(likes + 1)\r\n      setAction(1)\r\n      await fetch(`${config.api}/comment-vote`, {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ comment_id: comment.id, value: 1 }),\r\n      })\r\n    }\r\n    setDisabled(false)\r\n  }\r\n\r\n  const dislike = async () => {\r\n    if (!user) {\r\n      alert(\"You must be signed in to vote!\")\r\n      history.push(\"/signup\")\r\n      return\r\n    }\r\n    setDisabled(true)\r\n    if (action === -1) {\r\n      setDislikes(dislikes - 1)\r\n      setAction(null)\r\n      await fetch(`${config.api}/comment-vote`, {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ comment_id: comment.id, value: 0, id: comment.userLike[0]?.id }),\r\n      })\r\n    } else if (action === 1) {\r\n      setLikes(likes - 1)\r\n      setDislikes(dislikes + 1)\r\n      setAction(-1)\r\n      //send request to add vote to db\r\n      await fetch(`${config.api}/comment-vote`, {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ comment_id: comment.id, value: -1 }),\r\n      })\r\n    } else {\r\n      setDislikes(dislikes + 1)\r\n      setAction(-1)\r\n      await fetch(`${config.api}/comment-vote`, {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ comment_id: comment.id, value: -1 }),\r\n      })\r\n    }\r\n    setDisabled(false)\r\n  }\r\n\r\n  //delete comment\r\n  const handleDelete = async (comment) => {\r\n    if (user) {\r\n      await fetch(`${config.api}/comment`, {\r\n        method: \"DELETE\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ comment_id: comment.id }),\r\n      })\r\n    }\r\n  }\r\n\r\n  //ant comment actions\r\n  const actions = [\r\n    <span onClick={like}>\r\n      {action === 1 ? <LikeFilled /> : <LikeOutlined />}\r\n      <span className=\"comment-action\">{likes}</span>\r\n    </span>,\r\n    <span onClick={dislike}>\r\n      {action === -1 ? <DislikeFilled /> : <DislikeOutlined />}\r\n      <span className=\"comment-action\">{dislikes}</span>\r\n    </span>,\r\n    <span key=\"comment-reply-to\" onClick={() => setOpen(!open)}>\r\n      Reply to\r\n    </span>,\r\n    <span onClick={() => setConfirm(!confirm)}>\r\n      {comment.user.username === user?.username ? (\r\n        confirm ? (\r\n          <span>\r\n            are you sure?{\" \"}\r\n            <span className=\"deleteConfirmation\" onClick={() => handleDelete(comment)}>\r\n              yes\r\n            </span>\r\n            /no\r\n          </span>\r\n        ) : (\r\n          \"delete\"\r\n        )\r\n      ) : null}\r\n    </span>,\r\n  ]\r\n\r\n  //display comment, and it's children nested if exists, else display just the comments\r\n  return (\r\n    <div key={comment.id} className=\"comment-div\" disabled={disabled}>\r\n      {/* <div className=\"spinner-on\" style={{ display: \"off\" }}></div> */}\r\n      {children?.length > 0 ? (\r\n        <Comment\r\n          actions={actions}\r\n          author={<Link to={`/user?id=${comment.user.username}`}>{comment.user.username}</Link>}\r\n          content={comment.comment}\r\n          datetime={timeDifferenceForDate(comment.createdAt)}\r\n        >\r\n          {children.map((child) => (\r\n            <CommentComponent comment={child} comments={comments} children={comments.filter((c) => c.parent_id === child.id)} />\r\n          ))}\r\n        </Comment>\r\n      ) : (\r\n        <Comment\r\n          actions={actions}\r\n          author={<Link to={`/user?id=${comment.user.username}`}>{comment.user.username}</Link>}\r\n          content={comment.comment}\r\n          datetime={timeDifferenceForDate(comment.createdAt)}\r\n        />\r\n      )}\r\n      {open ? (\r\n        <Form onFinish={handleSubmit}>\r\n          <Form.Item\r\n            name=\"reply\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Cannot enter empty reply\",\r\n              },\r\n            ]}\r\n          >\r\n            <TextArea />\r\n          </Form.Item>\r\n          <Button htmlType=\"submit\">reply</Button>\r\n        </Form>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CommentComponent\r\n","import { List } from \"antd\"\r\nimport CommentComponent from \"./CommentComponent\"\r\n\r\nconst CommentList = ({ comments, baseComments }) => {\r\n  return (\r\n    <div>\r\n      <List\r\n        className=\"comment-list\"\r\n        itemLayout=\"horizontal\"\r\n        dataSource={baseComments}\r\n        renderItem={(comment) => {\r\n          return (\r\n            <CommentComponent\r\n              comment={comment} //the commnet itself\r\n              comments={comments} //array of all comments\r\n              children={comments.filter((c) => c.parent_id === comment.id)}\r\n            />\r\n          )\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CommentList\r\n","import { useSubscription } from \"@apollo/client\"\r\nimport { GET_POST, GET_POST_COMMENTS_SORTED_TOP } from \"../lib/queries\"\r\nimport Post from \"../components/Post\"\r\nimport { useUser } from \"../lib/user\"\r\nimport { useHistory } from \"react-router\"\r\nimport { Input, Button, Form, Menu, Dropdown } from \"antd\"\r\nimport CommentList from \"../components/CommentList\"\r\nimport { useState } from \"react\"\r\nimport { DownOutlined } from \"@ant-design/icons\"\r\nimport { Link } from \"react-router-dom\"\r\nimport config from \"../config\"\r\n\r\nconst { TextArea } = Input\r\n//get post given post id\r\n\r\nconst PostPage = (props) => {\r\n  const user = useUser()\r\n  const history = useHistory()\r\n\r\n  const pieces = props.location.search.split(\"&\")\r\n  const id = pieces[0].split(\"=\")[1]\r\n  let sort = \"new\"\r\n\r\n  if (pieces.length > 1) {\r\n    sort = pieces[1].split(\"=\")[1]\r\n  }\r\n\r\n  const [form] = Form.useForm()\r\n\r\n  const QUERY = sort === \"new\" ? GET_POST : sort === \"top\" ? GET_POST_COMMENTS_SORTED_TOP : GET_POST\r\n\r\n  const { data, loading } = useSubscription(QUERY, {\r\n    variables: { id: parseInt(id), user_issuer: user ? user?.issuer : \"\" },\r\n  })\r\n\r\n  //get comments\r\n\r\n  //comment sort\r\n  const [commentDisplay, setCommentDisplay] = useState(\"new\")\r\n\r\n  //submit comment\r\n  const handleSubmit = async (values) => {\r\n    if (!user) {\r\n      alert(\"You must be signed in to comment!\")\r\n      history.push(\"/login\")\r\n    }\r\n    const { comment } = values\r\n    await fetch(`${config.api}/comment`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify({ post_id: data.posts_by_pk.id, comment: comment }),\r\n    })\r\n    form.resetFields()\r\n  }\r\n\r\n  const menu = (\r\n    <Menu>\r\n      <Link to={`${props.location.pathname}${pieces[0]}`}>\r\n        <Menu.Item key=\"new\" onClick={() => setCommentDisplay(\"new\")}>\r\n          new\r\n        </Menu.Item>\r\n      </Link>\r\n      <Link to={`${props.location.pathname}${pieces[0]}&sort=top`}>\r\n        <Menu.Item key=\"top\" onClick={() => setCommentDisplay(\"top\")}>\r\n          top\r\n        </Menu.Item>\r\n      </Link>\r\n    </Menu>\r\n  )\r\n\r\n  if (loading) return <div>loading...</div>\r\n  return (\r\n    <div>\r\n      <Post post={data.posts_by_pk} />\r\n      <span className=\"comment-sort\">\r\n        sorted by{\" \"}\r\n        <Dropdown overlay={menu} trigger={[\"click\"]}>\r\n          <span className=\"comment-select\">\r\n            {commentDisplay} <DownOutlined />\r\n          </span>\r\n        </Dropdown>\r\n      </span>\r\n      <Form onFinish={handleSubmit} form={form}>\r\n        <Form.Item\r\n          name=\"comment\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Cannot enter empty comment\",\r\n            },\r\n          ]}\r\n        >\r\n          <TextArea />\r\n        </Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Add comment\r\n        </Button>\r\n      </Form>\r\n      {commentDisplay === \"new\" ? (\r\n        <CommentList\r\n          comments={data.posts_by_pk.comments} //all comments\r\n          baseComments={data.posts_by_pk.comments.filter((c) => c.parent_id === null)} //comments with no parents\r\n        />\r\n      ) : (\r\n        <CommentList\r\n          comments={data.posts_by_pk.comments} //all comments\r\n          baseComments={data.posts_by_pk.comments\r\n            .filter((c) => c.parent_id === null)\r\n            .sort((a, b) => {\r\n              return b.likes.aggregate.count - a.likes.aggregate.count\r\n            })} //comments with no parents\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostPage\r\n","import { Link } from \"react-router-dom\"\r\nimport { useQuery } from \"@apollo/client\"\r\nimport { GET_USER_DATA } from \"../lib/queries\"\r\n\r\nconst ProfilePage = (props) => {\r\n  const username = props.location.search.split(\"=\")[1]\r\n  const { data, loading } = useQuery(GET_USER_DATA, {\r\n    variables: {\r\n      username: username,\r\n    },\r\n  })\r\n\r\n  if (loading) return <div>loading..</div>\r\n\r\n  const date = new Date(data.users[0].createdAt)\r\n\r\n  return (\r\n    <div>\r\n      user: {username}\r\n      <br></br>\r\n      created: {date.toDateString()}\r\n      <br></br>\r\n      karma: {data.users[0].karma}\r\n      <span>\r\n        <br></br>\r\n        about: <Link to={`/submitted/${username}/1`}>submissions</Link>, <Link to={`/comments/${username}/1`}>comments</Link>\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfilePage\r\n","//postlist of posts the user submitted given username as parameter\r\nimport { GET_POSTS_FROM_USERNAME } from \"../lib/queries\"\r\nimport { useUser } from \"../lib/user\"\r\nimport { useQuery } from \"@apollo/client\"\r\nimport PostList from \"../components/PostList\"\r\nimport { LINKS_PER_PAGE } from \"../lib/constants\"\r\n\r\nconst Submitted = (props) => {\r\n  const user = useUser()\r\n  const pieces = props.location.pathname.split(\"/\")\r\n  console.log(pieces)\r\n  const page = pieces[pieces.length - 1]\r\n  const username = pieces[pieces.length - 2]\r\n\r\n  const offset = (page - 1) * LINKS_PER_PAGE\r\n  const limit = LINKS_PER_PAGE\r\n\r\n  const { data, loading } = useQuery(GET_POSTS_FROM_USERNAME, {\r\n    variables: {\r\n      username: username,\r\n      user_issuer: user?.issuer || \"\",\r\n      offset: offset,\r\n      limit: limit,\r\n    },\r\n  })\r\n\r\n  if (loading) return <div>loading..</div>\r\n  return (\r\n    <div>\r\n      <h1>{username}'s submissions </h1>\r\n      <PostList posts={data.posts} pageIndex={offset} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Submitted\r\n","import Post from \"../components/Post\"\r\nimport CommentComponent from \"../components/CommentComponent\"\r\nimport { GET_COMMENTS_FROM_USERNAME } from \"../lib/queries\"\r\nimport { useQuery } from \"@apollo/client\"\r\nimport { useUser } from \"../lib/user\"\r\nimport { Divider, Empty } from \"antd\"\r\nimport { LINKS_PER_PAGE } from \"../lib/constants\"\r\n\r\nconst Comments = (props) => {\r\n  const user = useUser()\r\n\r\n  const pieces = props.location.pathname.split(\"/\")\r\n  const page = pieces[pieces.length - 1]\r\n  const username = pieces[pieces.length - 2]\r\n\r\n  const offset = (page - 1) * LINKS_PER_PAGE\r\n  const limit = LINKS_PER_PAGE\r\n\r\n  const { data, loading } = useQuery(GET_COMMENTS_FROM_USERNAME, {\r\n    variables: {\r\n      username: username,\r\n      user_issuer: user ? user?.issuer : \"\",\r\n      offset: offset,\r\n      limit: limit,\r\n    },\r\n  })\r\n  if (loading) return <div>loading..</div>\r\n  return (\r\n    <div>\r\n      {data.comments.length > 0 ? (\r\n        data.comments.map((comment) => {\r\n          return (\r\n            <div>\r\n              <Post post={comment.post} />\r\n              <CommentComponent comment={comment} comments={comment} />\r\n              <Divider />\r\n            </div>\r\n          )\r\n        })\r\n      ) : (\r\n        <div>\r\n          <Empty />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Comments\r\n","import { useEffect } from \"react\"\r\nimport { useUser } from \"../lib/user\"\r\nimport { useHistory } from \"react-router\"\r\nimport PostList from \"../components/PostList\"\r\nimport { SUBSCRIBE_POSTS } from \"../lib/queries\"\r\nimport { useSubscription } from \"@apollo/client\"\r\nimport { LINKS_PER_PAGE } from \"../lib/constants\"\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport { Empty, Button } from \"antd\"\r\n\r\nconst Top = () => {\r\n  let user = useUser()\r\n  const history = useHistory()\r\n\r\n  const pageIndexParams = history.location.pathname.split(\"/\") //splitting up url params\r\n  const page = parseInt(pageIndexParams[pageIndexParams.length - 1]) //page number\r\n\r\n  const offset = (page - 1) * LINKS_PER_PAGE\r\n  const limit = LINKS_PER_PAGE\r\n  const orderBy = { votes_aggregate: { sum: { value: \"desc_nulls_last\" } } }\r\n\r\n  const { data, loading } = useSubscription(SUBSCRIBE_POSTS, {\r\n    variables: { user_issuer: user ? user?.issuer : \"\", offset: offset, limit: limit, order: orderBy, search: \"\" },\r\n  })\r\n\r\n  //TODO: REFACTOR THIS\r\n  //set posts that have no votes sum to 0\r\n  useEffect(() => {\r\n    if (data) {\r\n      data.posts.forEach((post) => {\r\n        if (post.votes.aggregate.sum.value === null) {\r\n          post.votes.aggregate.sum.value = 0\r\n        }\r\n      })\r\n      data.posts.sort((a, b) => {\r\n        return b.votes.aggregate.sum.value - a.votes.aggregate.sum.value\r\n      })\r\n    }\r\n  }, [data])\r\n\r\n  if (loading || !data) return <div>loading...</div>\r\n\r\n  if (data.posts.length === 0)\r\n    return (\r\n      <div>\r\n        <Empty />\r\n        <span\r\n          className=\"previous-button\"\r\n          onClick={() => {\r\n            if (page > 1) {\r\n              history.push(`/new/${page - 1}`)\r\n            }\r\n          }}\r\n        >\r\n          <Button>\r\n            <ArrowLeftOutlined style={{ fontSize: \"20px\" }} />\r\n          </Button>\r\n        </span>\r\n      </div>\r\n    )\r\n  else\r\n    return (\r\n      <div>\r\n        <PostList posts={data.posts} pageIndex={offset} />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Top\r\n","import { useUser } from \"../lib/user\"\r\nimport { useHistory } from \"react-router\"\r\nimport PostList from \"../components/PostList\"\r\nimport { SUBSCRIBE_POSTS } from \"../lib/queries\"\r\nimport { useSubscription } from \"@apollo/client\"\r\nimport { LINKS_PER_PAGE } from \"../lib/constants\"\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\"\r\nimport { Empty, Button } from \"antd\"\r\n\r\nconst New = () => {\r\n  let user = useUser()\r\n  const history = useHistory()\r\n\r\n  const pageIndexParams = history.location.pathname.split(\"/\") //splitting up url params\r\n  const page = parseInt(pageIndexParams[pageIndexParams.length - 1]) //page number\r\n\r\n  const offset = (page - 1) * LINKS_PER_PAGE\r\n  const limit = LINKS_PER_PAGE\r\n  const orderBy = { createdAt: \"desc\" }\r\n\r\n  const { data, loading } = useSubscription(SUBSCRIBE_POSTS, {\r\n    variables: { user_issuer: user ? user?.issuer : \"\", offset: offset, limit: limit, order: orderBy, search: \"\" },\r\n  })\r\n\r\n  if (loading || !data) return <div>loading...</div>\r\n  if (data.posts.length === 0)\r\n    return (\r\n      <div>\r\n        <Empty />\r\n        <span\r\n          className=\"previous-button\"\r\n          onClick={() => {\r\n            if (page > 1) {\r\n              history.push(`/new/${page - 1}`)\r\n            }\r\n          }}\r\n        >\r\n          <Button>\r\n            <ArrowLeftOutlined style={{ fontSize: \"20px\" }} />\r\n          </Button>\r\n        </span>\r\n      </div>\r\n    )\r\n  else\r\n    return (\r\n      <div>\r\n        <PostList posts={data.posts} pageIndex={offset} />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default New\r\n","import \"./App.css\"\nimport Nav from \"./components/Nav\"\nimport { Row, Col } from \"antd\"\nimport Side from \"./components/Side\"\nimport Callback from \"./pages/Callback\"\n// import Home from \"./pages/Home\"\nimport SignUp from \"./pages/SignUp\"\nimport Login from \"./pages/Login\"\nimport Search from \"./pages/Search\"\nimport Submit from \"./pages/Submit\"\nimport PostPage from \"./pages/PostPage\"\nimport ProfilePage from \"./pages/ProfilePage\"\nimport Submitted from \"./pages/Submitted\"\nimport Comments from \"./pages/Comments\"\nimport Top from \"./pages/Top\"\nimport { Switch, Route, useLocation, Redirect } from \"react-router-dom\"\nimport { Layout } from \"antd\"\nimport { useEffect, useState } from \"react\"\nimport New from \"./pages/New\"\nimport { useMediaQuery } from \"react-responsive\"\n\nconst { Header, Content, Sider } = Layout\n\nconst App = () => {\n  const [showSider, setShowSider] = useState(true)\n  const location = useLocation()\n  let currentPath = \"\"\n  useEffect(() => {\n    const { pathname } = location\n    currentPath = pathname.split(\"/\")[1]\n    if (currentPath === \"signup\" || currentPath === \"login\" || currentPath === \"search\" || currentPath === \"submit\") {\n      setShowSider(false)\n    } else {\n      setShowSider(true)\n    }\n  }, [location])\n\n  const minBreakpoint = useMediaQuery({ query: \"(max-width: 768px\" })\n\n  return (\n    <div className=\"app\">\n      <Layout className=\"app-layout\">\n        <Row>\n          <Col span={24}>\n            <Header className=\"header\">\n              <Nav />\n            </Header>\n          </Col>\n        </Row>\n        <Row>\n          <Layout className=\"content-layout\">\n            <Col xs={24} md={showSider ? 18 : 24}>\n              <Content className=\"content\">\n                <div className=\"content-div\">\n                  {!minBreakpoint && <div className=\"spacer\"></div>}\n                  <Switch>\n                    <Route exact path=\"/\" forceRefresh={true} render={() => <Redirect to=\"/new/1\" />} />\n                    <Route exact path=\"/new/:page\" component={New} />\n                    <Route exact path=\"/top/:page\" component={Top} />\n                    <Route exact path=\"/login\" component={Login} />\n                    <Route exact path=\"/signup\" component={SignUp} />\n                    <Route exact path=\"/callback\" component={Callback} />\n                    <Route exact path=\"/submit\" component={Submit} />\n                    <Route exact path=\"/search\" component={Search} />\n                    <Route exact path=\"/submitted/:username/:page\" component={Submitted} />\n                    <Route exact path=\"/comments/:username/:page\" component={Comments} />\n                    <Route exact path=\"/post\" component={PostPage} />\n                    <Route exact path=\"/user\" component={ProfilePage} />\n                  </Switch>\n                </div>\n              </Content>\n            </Col>\n            {showSider && (\n              <Col xs={0} md={6}>\n                <Sider\n                  className=\"sider\"\n                  onBreakpoint={(broken) => {\n                    console.log(\"broken\")\n                  }}\n                  width=\"100%\"\n                >\n                  <Side />\n                </Sider>\n              </Col>\n            )}\n          </Layout>\n        </Row>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport { WebSocketLink } from \"@apollo/client/link/ws\"\nimport config from \"./config\"\n\n//\"ws://localhost:8080/v1/graphql\"\nconst wsLink = new WebSocketLink({\n  uri: `ws://${config.hasura_endpoint}`,\n  credentials: \"include\",\n  options: {\n    reconnect: true,\n  },\n})\n\n//\"http://localhost:8080/v1/graphql\"\nconst client = new ApolloClient({\n  uri: `http://${config.hasura_endpoint}`,\n  cache: new InMemoryCache(),\n  link: wsLink,\n  // wsLink,\n})\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}